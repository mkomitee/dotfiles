#!/usr/bin/env python
"""Usage:
    pomodoro [-v | --verbose]
    pomodoro [-v | --verbose] work <comment>...
    pomodoro [-v | --verbose] [--long] break
    pomodoro [-v | --verbose] end
    pomodoro [-v | --verbose] pause
    pomodoro [-v | --verbose] continue
    pomodoro [-v | --verbose] [-l | --loop] status
    pomodoro [-v | --verbose] report
    pomodoro --version
    pomodoro [-h | --help]

Arguments:
    <comment>  Description of work to be done.

Options:
    -l, --loop     Loop and repeat status
    -v, --verbose  Print verbose information
    --version      Print version and exit
    -h, --help     Print help and exit"""


from docopt import docopt
from docopt import DocoptExit
from os.path import expanduser
from time import sleep
from sys import stdout
import datetime

# format: type   ACTION TIMESTAMP
# start:    <type> S      TIMESTAMP
# end:      <type> E      TIMESTAMP
# pause:    <type> P      TIMESTAMP
# continue: <type> C      TIMESTAMP

_POM = expanduser("~/.pom")

# TYPES
WORK = 'work'
BREAK = 'break'
LONGBREAK = 'longbreak'

# ACTIONS
START = 'start'
PAUSE = 'pause'
CONTINUE = 'continue'
STATUS = 'status'
END = 'end'
REPORT = 'report'

LOOP = '--loop'

# STATES
ACTIVE = 'active'
PAUSED = 'paused'
COMPLETED = 'completed'


def parse_time(dt_s):
    return datetime.datetime.fromtimestamp(int(dt_s))

def format_time(dt):
    return dt.strftime('%s')

def update(pom_type, action, dt, comment=None):
    with open(_POM, 'a') as fh:
        print >> fh, "%s__%s__%s__%s" % (pom_type, action, format_time(dt), comment)

def get_status():
    # type, state, time
    # -----------------------
    # work, active, timedelta
    # work, paused, timedelta
    # work, completed, timedelta
    # When active or paused, the timedelta returned is the time spent in the pom
    # When completed, the timedelta returned is the time since completion
    history = []
    pom_type = None
    state = None
    last_start = None
    last_pause = None
    last_end = None
    last_continue = None
    last_comment = None
    pause_time = 0
    now = int(datetime.datetime.now().strftime("%s"))
    try:
        with open(_POM) as fh:
            for line in fh.read().strip().split("\n"):
                pom_type, action, timestamp, comment = line.split('__')
                if comment == 'None':
                    comment = None
                dt = int(timestamp)
                history.append((pom_type, action, dt))
                if action == START:
                    state = ACTIVE
                    last_start = dt
                    last_comment = comment
                    pause_time = 0
                elif action == CONTINUE:
                    state = ACTIVE
                    last_continue = dt
                    pause_time = pause_time + (dt - last_pause)
                elif action == PAUSE:
                    state = PAUSED
                    last_pause = dt
                elif action == END:
                    state = COMPLETED
                    last_end = dt
                    pause_time = 0
    except IOError:
        return None, None, None, None

    if state == PAUSED:
        pause_time = pause_time + (now - last_pause)

    if state == COMPLETED:
        remaining = None
    elif pom_type == WORK:
        remaining = (1500 - (now - last_start - pause_time))
    elif pom_type == BREAK:
        remaining = (300 - (now - last_start - pause_time))
    elif pom_type == LONGBREAK:
        remaining = (900 - (now - last_start - pause_time))

    return pom_type, state, remaining, last_comment

def report(date):
    history = []
    activity = None
    try:
        with open(_POM) as fh:
            for line in fh.read().strip().split("\n"):
                pom_type, action, timestamp, comment = line.split('__')
                dt = parse_time(timestamp)
                if dt.year != date.year:
                    continue
                if dt.month != date.month:
                    continue
                if dt.day != date.day:
                    continue
                if pom_type != WORK:
                    continue
                if action == START:
                    state = ACTIVE
                    last_start = dt
                    last_comment = comment
                    pause_time = datetime.timedelta(0)
                elif action == CONTINUE:
                    state = ACTIVE
                    last_continue = dt
                    pause_time = pause_time + (dt - last_pause)
                elif action == PAUSE:
                    state = PAUSED
                    last_pause = dt
                elif action == END:
                    state = COMPLETED
                    last_end = dt
                    history.append([last_comment, (last_end - last_start - pause_time)])
                    pause_time = datetime.timedelta(0)
    except IOError:
        return None, None, None, None
    for comment, elapsed in history:
        print "%s: %s" % (elapsed, comment)

def loop():
    pass

def main():
    opts = docopt(__doc__, version='1.0.0')
    opts['<comment>'] = ' '.join(opts['<comment>'])
    pom_type, state, time, comment = get_status()
    if opts[WORK]:
        if state in [COMPLETED, None]:
            update(WORK, START, datetime.datetime.now(), opts['<comment>'])
            status()
        else:
            raise DocoptExit("Cannot start work")
    elif opts[BREAK]:
        if state in [COMPLETED, None]:
            if opts['--long']:
                update(LONGBREAK, START, datetime.datetime.now())
            else:
                update(BREAK, START, datetime.datetime.now())
            status()
        else:
            raise DocoptExit("Cannot start break")
    elif opts[END]:
        if state in [ACTIVE]:
            update(pom_type, END, datetime.datetime.now())
            status()
        else:
            raise DocoptExit("Cannot end")
    elif opts[PAUSE]:
        if state in [ACTIVE]:
            update(pom_type, PAUSE, datetime.datetime.now())
            status()
        else:
            raise DocoptExit("Cannot pause")
    elif opts[CONTINUE]:
        if state in [PAUSED]:
            update(pom_type, CONTINUE, datetime.datetime.now())
            status()
        else:
            raise DocoptExit("Cannot continue")
    elif opts[REPORT]:
        report(datetime.date.today())
    elif opts[STATUS]:
        if opts[LOOP]:
            while True:
                pom_type, state, time, comment = get_status()
                if time >= 0:
                    minutes = time / 60
                    seconds = time % 60
                    stdout.write("\r\x1b[K%.2d:%.2d" % (minutes, seconds))
                    stdout.flush()
                    sleep(1)
                else:
                    minutes = 0
                    seconds = 0
                    stdout.write("\r\x1b[K%.2d:%.2d" % (minutes, seconds))
                    stdout.flush()
                    sleep(1)
        else:
            exit(status())

def status():
    pom_type, state, time, comment = get_status()
    return_code = 0
    if time:
        if time > 0:
            minutes = time / 60
            seconds = time % 60
            stdout.write("%.2d:%.2d" % (minutes, seconds))
            stdout.flush()
        else:
            return_code = 1
            stdout.write("%.2d:%.2d" % (0, 0))
            stdout.flush()
    else:
        stdout.write("--:--")
        stdout.flush()
    return return_code

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        exit(1)

