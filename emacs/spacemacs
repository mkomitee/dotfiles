;; -*- mode: emacs-lisp -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Configuration Layers declaration."
  (setq-default
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()
   ;; List of configuration layers to load. If it is the symbol `all' instead
   ;; of a list then all discovered layers will be installed.
   dotspacemacs-configuration-layers
   '(
     (auto-completion :variables
                      auto-completion-enable-help-tooltip t
                      auto-completion-enable-sort-by-usage t
                      auto-completion-show-snippets-in-popup t)
     better-defaults
     c-c++
     (colors :variables colors-enable-rainbow-identifiers t)
     deft
     emacs-lisp
     evil-commentary
     evil-snipe
     extra-langs
     eyebrowse
     (git :variables
          git-gutter-use-fringe t
          magit-last-seen-setup-instructions "1.4.0"
          )
     go
     ;; haskell This is mucking about w/ flycheck-init-hooks
     html
     ipython-notebook
     javascript
     markdown
     org
     puppet
     python
     ruby
     rust
     (shell :variables shell-default-shell 'eshell)
     shell-scripts
     (syntax-checking :variables
                      syntax-checking-enable-tooltips nil)
     themes-megapack
     version-control
     ycmd
     )
   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages then consider to create a layer, you can also put the
   ;; configuration in `dotspacemacs/config'.
   dotspacemacs-additional-packages
   '(
     apache-mode
     csv-mode
     groovy-mode
     jinja2-mode
     llvm-mode
     nginx-mode
     protobuf-mode
     rpm-spec-mode
     scratch
     )
   ;; A list of packages and/or extensions that will not be install and loaded.
   dotspacemacs-excluded-packages '()
   ;; If non-nil spacemacs will delete any orphan packages, i.e. packages that
   ;; are declared in a layer which is not a member of
   ;; the list `dotspacemacs-configuration-layers'
   dotspacemacs-delete-orphan-packages t))

(defun dotspacemacs/init ()
  "Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; Either `vim' or `emacs'. Evil is always enabled but if the variable
   ;; is `emacs' then the `holy-mode' is enabled at startup.
   dotspacemacs-editing-style 'vim
   ;; If non nil output loading progress in `*Messages*' buffer.
   dotspacemacs-verbose-loading nil
   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed.
   dotspacemacs-startup-banner 'official
   ;; List of items to show in the startup buffer. If nil it is disabled.
   ;; Possible values are: `recents' `bookmarks' `projects'."
   dotspacemacs-startup-lists '(recents projects)
   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press <SPC> T n to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(
                         material
                         material-light
                         spacemacs-dark
                         spacemacs-light
                         solarized-dark
                         solarized-light
                         )
   ;; If non nil the cursor color matches the state color.
   dotspacemacs-colorize-cursor-according-to-state t
   ;; Default font. `powerline-scale' allows to quickly tweak the mode-line
   ;; size to make separators look not too crappy.
   dotspacemacs-default-font '("Source Code Pro"
                               :size 13
                               :weight normal
                               :width normal
                               :powerline-scale 1.1)
   ;; The leader key
   dotspacemacs-leader-key "SPC"
   ;; The leader key accessible in `emacs state' and `insert state'
   dotspacemacs-emacs-leader-key "M-m"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it.
   dotspacemacs-major-mode-leader-key ","
   ;; Major mode leader key accessible in `emacs state' and `insert state'
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   ;; The command key used for Evil commands (ex-commands) and
   ;; Emacs commands (M-x).
   ;; By default the command key is `:' so ex-commands are executed like in Vim
   ;; with `:' and Emacs commands are executed with `<leader> :'.
   dotspacemacs-command-key ":"
   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; Default value is `cache'.
   dotspacemacs-auto-save-file-location 'cache
   ;; If non nil then `ido' replaces `helm' for some commands. For now only
   ;; `find-files' (SPC f f) is replaced.
   dotspacemacs-use-ido nil
   ;; If non nil the paste micro-state is enabled. When enabled pressing `p`
   ;; several times cycle between the kill ring content.
   dotspacemacs-enable-paste-micro-state nil
   ;; Guide-key delay in seconds. The Guide-key is the popup buffer listing
   ;; the commands bound to the current keystrokes.
   dotspacemacs-guide-key-delay 0.4
   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil ;; to boost the loading time.
   dotspacemacs-loading-progress-bar t
   ;; If non nil the frame is fullscreen when Emacs starts up.
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil
   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX."
   dotspacemacs-fullscreen-use-non-native nil
   ;; If non nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'.
   dotspacemacs-active-transparency 90
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'.
   dotspacemacs-inactive-transparency 90
   ;; If non nil unicode symbols are displayed in the mode line.
   dotspacemacs-mode-line-unicode-symbols t
   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters the
   ;; point when it reaches the top or bottom of the screen.
   dotspacemacs-smooth-scrolling t
   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   dotspacemacs-smartparens-strict-mode nil
   ;; Select a scope to highlight delimiters. Possible value is `all',
   ;; `current' or `nil'. Default is `all'
   dotspacemacs-highlight-delimiters 'all
   ;; If non nil advises quit functions to keep server open when quitting.
   dotspacemacs-persistent-server t
   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now.
   dotspacemacs-default-package-repository nil
   )
  ;; User initialization goes here

  (setq server-use-tcp t
        server-socket-dir "~/.emacs.d/server"
        server-host system-name
        evil-want-C-w-in-emacs-state t
        )
  )

(defun dotspacemacs/config ()
  "Configuration function.
 This function is called at the very end of Spacemacs initialization after
layers configuration."

  ;; Split & focus by default
  (evil-leader/set-key
    "w-" 'split-window-below-and-focus
    "w/" 'split-window-right-and-focus)

  ;; Error checking
  (evil-define-key 'motion global-map
    "[e" 'spacemacs/previous-error
    "]e" 'spacemacs/next-error
    "[h" 'diff-hl-previous-hunk
    "]h" 'diff-hl-next-hunk
    )

  (evil-define-key 'motion magit-blame-map
    "[b" 'magit-blame-previous-chunk
    "]b" 'magit-blame-next-chunk
    )

  (evil-define-key 'normal flycheck-error-list-mode-map
    "q" 'quit-window
    )
  (global-flycheck-mode)
  (setq flycheck-checkers
        (delq 'emacs-lisp-checkdoc flycheck-checkers))

  ;; Tabs
  (evil-define-key 'motion global-map
    "[t" 'eyebrowse-prev-window-config
    "]t" 'eyebrowse-next-window-config
    "gT" 'eyebrowse-prev-window-config
    "gt" 'eyebrowse-next-window-config
    )
  (evil-ex-define-cmd "tabn[ew]" 'eyebrowse-switch-to-window-config)
  (evil-ex-define-cmd "tabc[lose]" 'eyebrowse-close-window-config)

  ;; Whitespace
  (setq whitespace-style
        (quote (face faces space-before-tab tab-mark tabs trailing))
        )
  (add-hook 'prog-mode-hook 'whitespace-mode)
  (add-hook 'text-mode-hook 'whitespace-mode)
  (add-hook 'before-save-hook 'whitespace-cleanup nil t)

  (defun komitee/complete-filename ()
    "Use hippie-expand to expand the filename"
    (interactive)
    (let ((hippie-expand-try-functions-list
           '(try-complete-file-name-partially try-complete-file-name)))
      (call-interactively 'hippie-expand)))

  (defun komitee/complete-keyword-current-file ()
    "Use hippie-expand to expand a keyword in the current file"
    (interactive)
    (let ((hippie-expand-try-functions-list
           '(try-expand-dabbrev)))
      (call-interactively 'hippie-expand)))

  (defun komitee/complete-keyword-all-files ()
    "Use hippie-expand to expand a keyword in all files"
    (interactive)
    (let ((hippie-expand-try-functions-list
           '(try-expand-dabbrev-all-buffers)))
      (call-interactively 'hippie-expand)))

  (defun komitee/complete-line ()
    "Use hippie-expand to expand a line"
    (interactive)
    (let ((hippie-expand-try-functions-list
           '(try-expand-line)))
      (call-interactively 'hippie-expand)))

  (defun komitee/complete-yas ()
    "Use hippie-expand to expand a line"
    (interactive)
    (let ((hippie-expand-try-functions-list
           '(yas-hippie-try-expand)))
      (call-interactively 'hippie-expand)))

  ;; Completion maps
  (evil-define-key 'insert global-map
    (kbd "C-x C-o") 'company-complete
    (kbd "C-x C-u") 'company-complete
    (kbd "C-x C-y") 'komitee/complete-yas
    (kbd "C-x C-n") 'komitee/complete-keyword-current-file
    (kbd "C-x C-i") 'komitee/complete-keyword-all-files
    (kbd "C-x C-f") 'komitee/complete-filename
    (kbd "C-x C-l") 'komitee/complete-line
    )

  ;; Initial state modes
  (dolist (mode '(Custom-mode))
    (evil-set-initial-state mode 'normal))

  (dolist (mode '(package-menu-mode
                  messages-buffer-mode))
    (evil-set-initial-state mode 'motion))

  (dolist (mode '(term-mode
                  ansi-term-mode))
    (evil-set-initial-state mode 'emacs))

  ;; Misc
  (evil-leader/set-key
    "gha" 'git-gutter:stage-hunk
    "bs" 'scratch
    )
  (setq undo-tree-auto-save-history t
        undo-tree-history-directory-alist (quote (("." . "~/.emacs.d/.undo")))
        comment-auto-fill-only-comments t
        vc-follow-symlinks t
        deft-directory "~/notes"
        deft-use-filter-string-for-filename t
        deft-text-mode 'markdown-mode
        deft-file-naming-rules '((noslash . "-")
                                 (nospace . "_")
                                 (case-fn . downcase))
        deft-extensions '("md" "txt" "text" "markdown" "org" "rst")
        company-idle-delay nil
        eshell-aliases-file "~/.dotfiles/emacs/aliases"
        evil-snipe-repeat-scope 'whole-buffer
        )
  (makunbound 'deft-extension)
  (auto-fill-mode 1)
  (add-hook 'prog-mode-hook 'turn-on-fci-mode)
  (add-hook 'text-mode-hook 'turn-on-fci-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
  (global-set-key (kbd "M-SPC") 'cycle-spacing)
  (global-linum-mode t)
  (global-vi-tilde-fringe-mode t)

  (add-hook 'prog-mode-hook 'spacemacs/highlight-TODO-words)
  (add-hook 'text-mode-hook 'spacemacs/highlight-TODO-words)

  ;; Disable smartparens auto-close for these symbols.
  (dolist (sym '("(" "[" "'" "\""))
    (sp-pair sym nil :actions :rem))

  (evil-leader/set-key
    "bb" 'helm-buffers-list)
  )

;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
