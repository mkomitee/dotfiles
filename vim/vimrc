" Configure Bundler
set rtp+=~/.vim/bundle/vundle
call vundle#rc()
filetype on
filetype plugin on
filetype indent on
syntax enable

" Load Plugins
Bundle 'AfterColors.vim'
Bundle 'AndrewRadev/linediff.vim.git'
Bundle 'MarcWeber/vim-addon-mw-utils'
Bundle 'Rainbow-Parenthsis-Bundle'
Bundle 'ShowMarks'
Bundle 'TaskList.vim'
Bundle 'ajf/puppet-vim'
Bundle 'altercation/vim-colors-solarized'
Bundle 'coderifous/textobj-word-column.vim'
Bundle 'ervandew/supertab.git'
Bundle 'LaTeX-Box'
Bundle 'gmarik/vundle'
Bundle 'godlygeek/tabular'
Bundle 'kien/ctrlp.vim'
Bundle 'majutsushi/tagbar'
Bundle 'mileszs/ack.vim'
Bundle 'mricon/puppet-eyes'
Bundle 'python_match.vim'
Bundle 'ruby-matchit'
Bundle 'scrooloose/nerdcommenter'
Bundle 'scrooloose/nerdtree'
Bundle 'sjl/badwolf'
Bundle 'sjl/splice.vim'
Bundle 'tmatilai/gitolite.vim'
Bundle 'tomtom/tlib_vim'
Bundle 'tpope/vim-endwise'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-git'
Bundle 'tpope/vim-markdown'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-unimpaired'

" Prepare our vim cache directories
silent execute '!mkdir -p $HOME/.vimdata/vimbackup'
silent execute '!mkdir -p $HOME/.vimdata/vimswap'
silent execute '!mkdir -p $HOME/.vimdata/vimviews'
silent execute '!mkdir -p $HOME/.vimdata/vimundo'
silent execute '!mkdir -p $HOME/.vimdata/ctrlp'

" Preferences
set encoding=utf-8             " Prefer utf-8 character encoding
set autoindent                 " Try to line up code intelligently
set hidden                     " Allow for hidden buffers
set backspace=indent,eol,start " Nothing is too sacred to be <BS>
set laststatus=2               " Every window always gets a statusline
set history=10000              " Keep a lot of ex commands in history
set list                       " show invisibles
set showbreak=↪                " indicate a line is the continuation of a
                               "  wrapped line
set showmatch                  " show matching parenthesis
set splitbelow                 " new horizontal splits to below
set splitright                 " new vertical splits goto the right
set autoread                   " reread files which changes on disk if they
                               "  havnt changed in the buffer
set showfulltag                " when completing a word from a tags file,
                               " include extra info about the tag in the
                               " completion menu
set foldlevelstart=99          " Start with all folds open
set nojoinspaces               " Don't be fancy with join
set dictionary=/usr/share/dict/words        " for spell checking
set spellfile=~/.dotfiles/vim/en.utf-8.add  " to add words
set spelllang=en_us            " yes, i do speak it
set number                     " line numbers
set updatecount=10             " update swap files every 10 chars
set nostartofline              " don't move the cursor to the start of the
                               " line when we move vertically in the buffer
set pumheight=10               " show no more than 10 entries in completion menus
set scrolloff=5                " keep at least 5 lines of context when scrolling
set sidescrolloff=10           " keep at least 10 characters of context when scrolling
set sidescroll=1               " scroll horizontally by 1
set incsearch                  " search as I type
set ignorecase                 " ignore case when searching, ...
set smartcase                  " unless I search for uppercase
set hlsearch                   " and highlight searches
set gdefault                   " replace all occurrances on the line by default
set tabstop=4                  " 4 space tabs
set shiftwidth=4               " indentation uses 4 spaces as well e.g. >>
set expandtab                  " uses spaces, not tabs
set softtabstop=2              " use 2 spaces when tabbing because, ...
set smarttab                   " use softtabstop when tabbing when not at start of line
set textwidth=79               " break long lines after 80 chars
set backupdir=$HOME/.vimdata/vimbackup/ " save backups in alternate location
set directory=$HOME/.vimdata/vimswap/   " save swap files here
set viewdir=$HOME/.vimdata/vimviews/    " save views here
set wildmenu                   " commandline completion is nice

" Try desparately to tweak the cursor
set guicursor=n-v-c:block-Cursor
set guicursor+=i:ver20-Cursor-blinkon600-blinkoff600
set guicursor+=n-v-c:block-Cursor-blinkon600-blinkoff600

" Use a bar-shaped cursor for insert mode, even through tmux.
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

if has('mouse')
    set mouse=a " If a mouse is available, use it in all modes
endif

if exists('&undofile')
    set undofile         " Save undo history to a file for persistence
    set undodir=$HOME/.vimdata/vimundo/ " Save undo data here
endif

set fillchars=        " reset fillchars
set fillchars+=fold:- " fill foldtext with dashes
set fillchars+=diff:⣿ " indicate deleted lines in diffs with ⣿
set fillchars+=vert:❚ " indicate vertical splits with ❚

set listchars=            " reset listchars
set listchars+=tab:▸\     " display tabs
set listchars+=eol:¶      " display eol
set listchars+=extends:❯  " hint that theres more to the right, ...
set listchars+=precedes:❮ " hint that theres more to the left, ...
set listchars+=trail:♦    " and indicate trailing whitespace

set shortmess=   " reset shortmess
set shortmess+=f " '(3 of 5)' instead of '(file 3 of 5)'
set shortmess+=i " '[noeol] instead of '[Incompelte last line]'
set shortmess+=l " '999L, 888C' instead of '999 lines, 888 characters'
set shortmess+=m " '[+]' instead of '[Modified]'
set shortmess+=n " '[New]' instead of '[New File]'
set shortmess+=r " '[RO]' instead of '[readonly]'
set shortmess+=w " '[w]' instead of 'written' '[a]' instead of 'appended'
set shortmess+=x " '[dos]' instead of '[dos format]', '[unix]' instead of
                 "  '[unix format]', '[mac]' instead of '[mac format]'
set shortmess+=o " overwrite message for writing a file with subsequent message
                 "  for reading a file (useful for ":wn" or when 'autowrite' on)
set shortmess+=O " message for reading a file overwrites any previous message.
                 "  Also for quickfix message (e.g., ":cn").
set shortmess+=t " truncate file message at the start if it is too long to fit
                 "  on the command-line, "<" will appear in the left most column.
                 "  Ignored in Ex mode.
set shortmess+=T " truncate other messages in the middle if they are too long to
                 "  fit on the command line.  "..." will appear  in the middle.
                 "  Ignored in Ex mode.
set shortmess+=I " don't give the intro message when starting Vim |:intro|.

set iskeyword-=: " treat : as a keyword
set iskeyword-=; " treat ; as a keyword
set iskeyword-=, " treat , as a keyword
set iskeyword+=_ " treat _ as a keyword

set diffopt=        " reset diffopt
set diffopt+=filler " add filler to diff to keep text synchronized
set diffopt+=iwhite " ignore white space in diff

set completeopt=         " reset completeopt
set completeopt+=longest " insert the longest match
set completeopt+=menu    " show the menu when there are matches
set completeopt+=menuone " even if there's only one
set completeopt+=preview

set viminfo+=n~/.vimdata/viminfo " move the viminfo file into ~/.vimdata

set switchbuf=                   " reset switchbuf
set switchbuf+=useopen " switch to a window with the file on open instead of opening it in a second window
set switchbuf+=usetab  " switch to another tab with the file open instead of opening it in a second window

set virtualedit=        " reset virtualedit
set virtualedit+=block  " can move past the end of the line in visual block mode
set virtualedit+=insert " can move past the end of the line in insert mode

set formatoptions=   " reset formatoptions
set formatoptions+=c " autowrap comments using textwidth
set formatoptions+=r " insert comment after hitting enter in a comment
set formatoptions+=o " insert comment after 'o' or 'O' in normal mode
set formatoptions+=q " format comments with gq
set formatoptions+=n " recognize numbered lists

set wildmode=              " reset wildmode
set wildmode+=longest:full " complete til longest string, use wildmenu
set wildmode+=list:full    " when more than one matchm list all and complete the
                                 " first
set wildignore+=.git,.hg,.svn,CVS              " ignore vcs directories
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg " ignore images
set wildignore+=*.o,*.so,*.out                 " ignore compiled objects
set wildignore+=*.sw?                          " ignore swap files
set wildignore+=*.DS_Store                     " ignore mac crap
set wildignore+=*.pyc,*.pyo                    " ignore pyton compiled objects

set statusline=          " clear statusline
set statusline+=%F\      " full filename
set statusline+=%m%r%w   " flags
set statusline+=%y\      " filetype
set statusline+=%=       " seperator
set statusline+=c:%c\    " column
set statusline+=l:%l/%L\ " line
set statusline+=(%p%%)   " percentage thru file

set whichwrap+=<,> " <Left> and <Right> can move to the previous/next line


" j and k will go one line, even if they're wrapped
nnoremap j gj
nnoremap k gk

" when using marks, all by default mark columns as well
nnoremap ' `

" Sometimes I don't release shift fast enough, so let's be forgiving.
command! -bang E e<bang>
command! -bang Q q<bang>
command! -bang W w<bang>
command! -bang QA qa<bang>
command! -bang Qa qa<bang>
command! -bang Wa wa<bang>
command! -bang WA wa<bang>
command! -bang Wq wq<bang>
command! -bang WQ wq<bang>

" Setup my colorscheme, ... 
colorscheme badwolf

" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" Leaders
let mapleader = " "     " this may change soon, I keep wanting to have the
                        " default behavior work for ,.
let localleader = '\\'

" This may cause a lot of processing, but we can disable it if it causes problems
augroup showmarks
    au!
    " This is because of some magical marks like )  and (
    au CursorMoved * execute 'ShowMarksOn'
augroup END

augroup vimmemory
    au!
    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    " Also don't do it when the mark is in the first line, that is the default
    " position when opening a file.
    au BufReadPost *
                \ if line("'\"") > 1 && line("'\"") <= line("$")  |
                \   exe "normal! g`\"" |
                \ endif
    " use views to restore more state
    au BufWinLeave * silent! mkview
    au BufWinEnter * silent! loadview
augroup END

augroup encryption
    au!
    au BufRead,BufNewFile *.crypt set noswapfile
    au BufRead,BufNewFile *.crypt set bufhidden=wipe
augroup END

" Simple map to disable highlighting
nnoremap // :nohl<cr>

" Simple resizing of windows
noremap + <c-W>+
noremap - <c-W>-

" Easier navigation between open windows
nnoremap <C-k> <C-W>k
nnoremap <C-j> <C-W>j
nnoremap <C-h> <C-W>h
nnoremap <C-l> <C-W>l

" Splits
nnoremap _ :sp<cr>
nnoremap \| :vsp<cr>

" Reselect visually selected text after indenting
vnoremap > >gv
vnoremap < <gv

" make Y consistant with C and D
noremap Y y$

" Easily modify ~/.{g,}vimrc
nnoremap <leader>ev :e $MYVIMRC<CR>
nnoremap <leader>egv :e$MYGVIMRC<CR>
nnoremap <leader>sv :so $MYVIMRC<CR>
nnoremap <leader>sgv :so $MYGVIMRC<CR>

" sudo write-file in case you opened a file you dont have privileges to write
cmap w!! w !sudo tee % >/dev/null<cr>

" Smarter Pasting!
nnoremap <Leader>P :set paste<CR>"*p;set nopaste<CR>
nnoremap <leader>y "*y
nnoremap <leader>Y "*Y

nnoremap <c-c> :close<cr>

" Ctrl+P
let g:ctrlp_extensions = ['tag', 'buffertag', 'quickfix', 'dir']
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_cache_dir = $HOME.'/.vimdata/ctrlp'
let g:ctrlp_max_depth = 10
let g:ctrlp_mruf_relative = 1
let g:ctrlp_jump_to_buffer = 0
let g:ctrlp_working_path_mode = 0
let g:ctrlp_open_new_file = 'r'
let g:ctrlp_open_multi = '1vr'
let g:ctrlp_dont_split = 'netrw\|help'
nnoremap <c-b> :CtrlPBuffer<CR>
nnoremap <c-u> :CtrlPUndo<CR>
nnoremap <leader>p :CtrlP<CR>
nnoremap <leader>u :CtrlPUndo<CR>
nnoremap <leader>b :CtrlPBuffer<CR>
nnoremap <leader>r :CtrlPMRU<CR>
nnoremap <leader>r :CtrlPMRU<CR>
nnoremap <leader>q :CtrlPQuickfix<CR>
nnoremap <leader>l :CtrlPLine<CR>

" Tabularize
vnoremap <silent> <Leader>a=> :Tabularize /=>/l1l1<CR>
vnoremap <silent> <Leader>a= :Tabularize /=/l1l1<CR>
vnoremap <silent> <Leader>a, :Tabularize /,/l0l1<CR>
vnoremap <silent> <Leader>a: :Tabularize /:/l0l1<CR>

" Showmarks
let g:showmarks_enable=1
let g:showmarks_include="'`^<>.abcdefghijklmnopqrstuvwxyz()[]{}"
let g:showmarks_ignore_type=''
let g:showmarks_textlower="\t"
let g:showmarks_textupper="\t"
let g:showmarks_textother="\t"

" NERDCommenter
let g:NERDCreateDefaultMappings = 0
let g:NERDSpaceDelims = 1
vmap <leader>cc <plug>NERDCommenterToggle<cr>vgv
vmap <leader><leader> <plug>NERDCommenterToggle<cr>vgv
nmap <leader>cc <plug>NERDCommenterToggle
nmap <leader><leader> <plug>NERDCommenterToggle
nmap <leader>c$ <plug>NERDCommenterToEOL

" NERDTree.vim
let g:NERDTreeDirArrows = 1
let g:NERDTreeMinimalUI = 1
let NERDTreeIgnore=['\~$', '\.swp$', '^CVS$', '\.svn$', '^CVSROOT$', '^\.git$', '\.pyc$', '\.pyo$']
noremap <Leader>dd :NERDTreeToggle<CR>
noremap <Leader>df :NERDTreeFind<CR>

" Supertab
let g:SuperTabDefaultCompletionType = "context"

" Load experimental library
source ~/.vim/experimental.vim

" Load additional functions
source ~/.vim/functions.vim

" Load abbreviations
source ~/.vim/abbrev

" Modelines:
" vim: nowrap fdm=marker ft=vim
