
" Preamble     ------------------------------------------------------------- {{{

call pathogen#runtime_append_all_bundles()
call pathogen#helptags()
silent execute '!mkdir -p $HOME/.vimdata/vimbackup'
silent execute '!mkdir -p $HOME/.vimdata/vimswap'
silent execute '!mkdir -p $HOME/.vimdata/vimviews'
silent execute '!mkdir -p $HOME/.vimdata/vimundo'
silent execute '!mkdir -p $HOME/.vimdata/fufdata'
filetype plugin on
filetype plugin indent on
syntax enable
set nocompatible
for file in split(glob("$HOME/.vim/functions/*.vim"))
    exe "source " . file
endfor

" }}}
" Preferences -------------------------------------------------------------- {{{
set encoding=utf-8
set fileformats=unix,mac,dos
set autoindent
set showmode
set showcmd
set hidden
set visualbell t_vb=  " No bells; No flashing!
set ttyfast
set backspace=indent,eol,start
set number
set laststatus=2
set history=10000
set undofile
set undoreload=10000
set undolevels=10000
set list
set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮,trail:·
set lazyredraw
set matchtime=3
set showbreak=↪
set splitbelow
set splitright
set fillchars=diff:⣿
set ttimeout
set notimeout
set nottimeout
set autowrite
set shiftround
set autoread
set title
set dictionary=$HOME/.vimdata/words
set showfulltag
set shortmess+=filmnrxoOtTI
set foldcolumn=2
set iskeyword-=:
set iskeyword-=;
set iskeyword-=,
set iskeyword+=_
set display+=lastline
set diffopt=filler,iwhite
set updatecount=10
set completeopt=longest,menu,menuone
set switchbuf=usetab
set nostartofline
set viminfo='100,<50,s10,h,n~/.vimdata/viminfo

if has('mouse')
    set mouse=a
endif
" }}}
" Searching & Movement ----------------------------------------------------- {{{
set incsearch
set ignorecase
set smartcase
set hlsearch
set gdefault
set showmatch
set matchpairs+=<:>
set magic

noremap <leader><space> :nohl<cr>:call clearmatches()<cr>

" Open a Quickfix window for the last search.
nnoremap <silent> <leader>/ :execute 'vimgrep /'.@/.'/g %'<CR>:copen<CR>

set scrolloff=5
set sidescroll=1
set sidescrolloff=10

set virtualedit+=block

" Keep search matches in the middle of the window and pulse the line when moving
" to them.
nnoremap n nzzzv:call PulseCursorLine()<cr>
nnoremap N Nzzzv:call PulseCursorLine()<cr>
nnoremap g; g;zzzv:call PulseCursorLine()<cr>
nnoremap g, g,zzzv:call PulseCursorLine()<cr>

" j and k will go one line, even if they're wrapped
nnoremap j gj
nnoremap k gk

" start / end of line should be easier to reach than ^ and $
nnoremap H ^
nnoremap L g_

" when using marks, all by default mark columns as well
nnoremap ' `

" }}}
" Disable annoying maps ---------------------------------------------------- {{{
noremap <F1> <nop>
noremap <K> <nop>
"
" }}}
" Defaults for tabs, spaces, & wrapping ------------------------------------ {{{
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set wrap
set textwidth=80
set formatoptions=croqln
call ToggleColorColumn('on')
" }}}
" Backups & State ---------------------------------------------------------- {{{
set backupdir=$HOME/.vimdata/vimbackup/
set directory=$HOME/.vimdata/vimswap/
set viewdir=$HOME/.vimdata/vimviews/
set undodir=$HOME/.vimdata/vimundo/
" }}}
" Wildmode ----------------------------------------------------------------- {{{
set wildmenu
set wildmode=longest:full,list:full

set wildignore+=.git,.hg,.svn,CVS
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg
set wildignore+=*.o,*.so
set wildignore+=*.sw?
set wildignore+=*.DS_Store
set wildignore+=*.pyc,*.pyo
" }}}
" Colorscheme -------------------------------------------------------------- {{{
set background=dark
colorscheme solarized

if &t_Co < 16
    set t_Co=16
endif

hi ColorColumn guibg=#191919 gui=BOLD ctermbg=NONE cterm=BOLD

" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

set guicursor=n-v-c:block-Cursor
set guicursor+=i:ver20-Cursor-blinkon600-blinkoff600
set guicursor+=n-v-c:block-Cursor-blinkon600-blinkoff600
" }}}
" Leaders ------------------------------------------------------------------ {{{
let mapleader = ","
let localleader = '\\'
" }}}
" Statusline --------------------------------------------------------------- {{{
set statusline=   " clear the statusline for when vimrc is reloaded

set statusline+=[%n]\                         " buffer number
set statusline+=%<%.99f\                      " file name
set statusline+=%h%m%r%w                      " flags
set statusline+=[%{strlen(&ft)?&ft:'none'}]\  " filetype
set statusline+=%{fugitive#statusline()}\     " git branch
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
set statusline+=%=                            " right align, left comes from bufstat
set statusline+=col:%v\                       " current column
set statusline+=lin:%l/%L\                    " line
set statusline+=%p%%                          " percentage through file

" }}}
" AutoCommands {{{1

" If we change focus away from vim, goto normal mode
" do the same if we're in insert mode for 15 seconds
" feedback on the statusline that we're in insert mode
augroup exit_insert_mode
    au!
    au FocusLost,TabLeave * call feedkeys("\<C-\>\<C-n>")
    au CursorHoldI * stopinsert
    au InsertEnter * let updaterestore=&updatetime | set updatetime=15000
    au InsertLeave * let &updatetime=updaterestore
    au InsertEnter * hi StatusLine ctermfg=196 guifg=#FF3145
    au InsertLeave * hi StatusLine ctermfg=14 ctermbg=0 guifg=#93a1a1 guibg=#073642
augroup END

" Equal all folds on resize
augroup resize
    au!
    au VimResized * exe "normal! \<c-w>="
augroup END

augroup cursor
    au!
    au WinEnter,VimEnter,BufNewFile,BufRead * setlocal cursorline
    au WinLeave,VimLeave * setlocal nocursorline
    " au WinEnter,VimEnter,BufNewFile,BufRead * setlocal cursorcolumn
    " au WinLeave,VimLeave * setlocal nocursorcolumn
augroup END

augroup vimmemory
    au!
    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    " Also don't do it when the mark is in the first line, that is the default
    " position when opening a file.
    au BufReadPost *
                \ if line("'\"") > 1 && line("'\"") <= line("$")  |
                \   exe "normal! g`\"" |
                \ endif
    " use views to restore more state
    au BufWinLeave * silent! mkview
    au BufWinEnter * silent! loadview
augroup END

augroup templates
    au!
    autocmd! BufNewFile * silent! 0r ~/.vim/skel/tmpl.%:e
augroup END

augroup nerdtree
    au!
    autocmd WinEnter * call s:CloseIfOnlyNerdTreeLeft()
augroup END

" Toggles & Switches (Leader commands) {{{1

" zT will move the current line to 1/4th from the top of the window
nnoremap <expr> zT 'zt' . winheight(0)/4 . '<c-y>'
" zB will move the current line to 1/4th from the bottom of the window
nnoremap <expr> zB 'zb' . winheight(0)/4 . '<c-e>'

nnoremap <leader>v :vsplit<cr>
nnoremap <leader>h :split<cr>

"C-{hjkl} to move text or text blocks left down up or right
inoremap <C-j> <Esc>:m+<CR>==gi
inoremap <C-k> <Esc>:m-2<CR>==gi
inoremap <C-h> <Esc><<`]a
inoremap <C-l> <Esc>>>`]a
vnoremap <C-j> :m'>+<CR>gv=gv
vnoremap <C-k> :m-2<CR>gv=gv
vnoremap <C-h> <gv
vnoremap <C-l> >gv

noremap <Leader>c :close<cr>

" <space> switches to the next window (give it a second)
" <space>n switches to the next window
" <space><space> switches to the next window and maximizes it
" <space>= Equalizes the size of all windows
" + Increases the size of the current window
" - Decreases the size of the current window
noremap <space> <c-W>wzz:call PulseCursorLine()<cr>
noremap <space>n <c-W>wzz:call PulseCursorLine()<cr>
noremap <space><space> <C-W>w<C-W>_zz:call PulseCursorLine()<cr>
noremap <space>= <c-W>=zz:call PulseCursorLine()<cr>
if bufwinnr(1)
    noremap + <c-W>+
    noremap - <c-W>-
endif

" Easier navigation between open windows
nnoremap <C-k> <C-W>kzz:call PulseCursorLine()<cr>
nnoremap <C-j> <C-W>jzz:call PulseCursorLine()<cr>
nnoremap <C-h> <C-W>hzz:call PulseCursorLine()<cr>
nnoremap <C-l> <C-W>lzz:call PulseCursorLine()<cr>
nnoremap <C-Right> <C-W>lzz:call PulseCursorLine()<cr>
nnoremap <C-Left> <C-W>hzz:call PulseCursorLine()<cr>
nnoremap <C-Up> <C-W>kzz:call PulseCursorLine()<cr>
nnoremap <C-Down> <C-W>jzz:call PulseCursorLine()<cr>

" Reselect visually selected text after indenting
vnoremap > >gv
vnoremap < <gv

" Select the last edited/pasted text
nnoremap gv `[v`]
nnoremap <Leader>= <C-W>=
nnoremap <Leader>> <C-W>>
nnoremap <Leader>< <C-W><
" make Y consistant with C and D
noremap Y y$

" Change buffers with tab and shift-tab
noremap <tab> :bn<cr>
noremap <s-tab> :bp<cr>

" Easily modify vimrc
nnoremap <leader>ev :e $MYVIMRC<CR>
nnoremap <leader>egv :e$MYGVIMRC<CR>
nnoremap <leader>sv :so $MYVIMRC<CR>
nnoremap <leader>sgv :so $MYGVIMRC<CR>

" Move visually selected lines down/up
vnoremap <C-Down> ]egv
vnoremap <C-Up> [egv

" Move visual selection back/forwards
set ww+=<,>
vnoremap <C-Left> x<Left>P`[v`]
vnoremap <C-Right> x<Right>P`[v`]

" My main typos, these arent used in commands so why not?
cnoremap WQ wq
cnoremap wQ wq

" sudo write-file in case you opened a file you dont have privileges to write
cmap w!! w !sudo tee % >/dev/null<cr>

" Smarter Pasting!
nnoremap <Leader>P :set paste<CR>"*p;set nopaste<CR>

" Custom commands and functions {{{1
nnoremap <silent> <leader>mw :call MarkWindowSwap()<CR>
nnoremap <silent> <leader>pw :call DoWindowSwap()<CR>


" Diff against whats on disk
nnoremap <Leader>do :call DiffOrig()<CR>

" Toggles for location and quickfix window {{{2
nnoremap <silent> <leader>ll :call ToggleList("Location List", 'l')<CR>
nnoremap <silent> <leader>qf :call ToggleList("Quickfix List", 'c')<CR>

" Diff between buffer and the unwritten file {{{2
if !exists(":DiffOrig")
    command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
                \ | wincmd p | diffthis
endif

" Strip trailing whitespaces  {{{2
function! Preserve(command)
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    execute a:command
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
nnoremap _$ :call Preserve("%s/\\s\\+$//e")<CR>
nnoremap _= :call Preserve("normal gg=G")<CR>

" Search for current visual selection with */# {{{2
" Tip tip from: http://amix.dk/blog/viewEntry/19334
function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction

function! VisualSearch(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

" Generate a color pallette {{{2
function! Colorize()
    let num = 255
    while num >= 0
        exec 'hi col_'.num.' ctermbg='.num.' ctermfg=white'
        exec 'syn match col_'.num.' "ctermbg='.num.':...." containedIn=All'
        call append(0, 'ctermbg='.num.':....')
        let num = num - 1
    endwhile
endfunction

" Pasting Buffers {{{2
fu! PasteWindow(direction)
    if exists("g:yanked_buffer")
        if a:direction == 'edit'
            let temp_buffer = bufnr('%')
        endif

        exec a:direction . " +buffer" . g:yanked_buffer

        if a:direction == 'edit'
            let g:yanked_buffer = temp_buffer
        endif
    endif
endf

"yank/paste buffers
" :nnoremap <silent> <leader>wy  :let g:yanked_buffer=bufnr('%')<cr>
" :nnoremap <silent> <leader>wd  :let g:yanked_buffer=bufnr('%')<cr>:q<cr>
" :nnoremap <silent> <leader>wp :call PasteWindow('edit')<cr>
" :nnoremap <silent> <leader>ws :call PasteWindow('split')<cr>
" :nnoremap <silent> <leader>wv :call PasteWindow('vsplit')<cr>

" Configure plugins {{{1
" Yankring {{{2
nnoremap <leader>y :YRShow<cr>
" Align {{{2
vnoremap <leader>a=> :Align => =<cr>

" Syntastic {{{2
let g:syntastic_enable_signs   = 1
let g:syntastic_auto_jump      = 0
let g:syntastic_auto_loc_list  = 2
" let g:syntastic_quiet_warnings = 1

" ctrlp {{{2
let g:ctrlp_working_path_mode = 0
let g:ctrlp_dotfiles = 0
let g:ctrlp_max_height = 20000
let g:ctrlp_use_caching=1
let g:ctrlp_max_files = 20000

" Bexec {{{2
nnoremap <silent> <unique> <F8> :call Bexec()<cr>
vnoremap <silent> <unique> <F8> :call BexecVisual()<cr>
noremap <silent> <unique> <F9> :call BexecCloseOut()<cr>


" Screen/tmux {{{2
let g:ScreenImpl = 'Tmux'
"
" Simplenote {{{2
source ~/.simplenoterc
noremap <Leader>sl :Simplenote -l<CR>
noremap <Leader>sn :Simplenote -n<CR>

" Lusty {{{2
noremap <Leader>be :LustyBufferExplorer<CR>
noremap <Leader>fe :LustyFilesystemExplorer<CR>
noremap <Leader>re :LustyFilesystemExplorerFromHere<CR>
noremap <Leader>j :LustyJuggler<CR>

" AutoClose
noremap <Leader>x <Plug>ToggleAutoCloseMappings

" tagbar {{{2
noremap <leader>t :TagbarToggle<CR>
let g:tagbar_expand = 1
let g:tagbar_sort = 1
let g:tagbar_ctags_use_tagfiles = 1

" Showmarks {{{2
let g:showmarks_enable=1
let g:showmarks_include="abcdefghijklmnopqrstuvwxyz"
let g:showmarks_textlower="\t>"

" bufkill {{{2
noremap <Leader>k :bd<CR>
noremap <Leader>k! :bd!<CR>

" Command-T {{{2
noremap <Leader>ct :CommandT<CR>

" FuzzyFinder {{{2
let g:fuf_modesDisable = []
let g:fuf_dataDir = '~/.vimdata/fufdata'
noremap <Leader>fb :FufBuffer<CR>
noremap <Leader>ff :FufFile<CR>
noremap <Leader>fm :FufMruFile<CR>

" Ack {{{2
noremap <Leader>g :Ack<space><C-r><C-w><CR>
let ackprg="~/scripts/ack"
"let ackprg="~/scripts/ack --nocolor --nogroup --column --flush"

" NERDCommenter {{{2
" When we comment something with the NERDComment Toggle, reselect
let g:NERDCreateDefaultMappings = 0
let g:NERDSpaceDelims = 1
vmap <leader>cc <plug>NERDCommenterToggle<cr>vgv
nmap <leader>cc <plug>NERDCommenterToggle
vmap <leader>cb <plug>NERDCommenterSexy<cr>vgv
nmap <leader>cb <plug>NERDCommenterSexy
vmap <leader>c<space> <plug>NERDCommenterToggle<cr>vgv
nmap <leader>c<space> <plug>NERDCommenterToggle
nmap <leader>c$ <plug>NERDCommenterToEOL


" NERDTree.vim {{{2
let g:NERDTreeUseExistingWindows = 1
let NERDTreeIgnore=['\~$', '\.swp$', '^CVS$', '\.svn$', '^CVSROOT$', '^\.git$', '\.pyc$', '\.pyo$', '\.swp$']
noremap <Leader>dd :NERDTreeToggle<CR>
noremap <Leader>df :NERDTreeFind<CR>
let NERDTreeShowBookmarks=1
let NERDTreeQuitOnOpen=0
let NERDTreeHighlightCursorLine=0
let NERDTreeHijackNetrw=1

" Close all open buffers on entering a window if the only
" buffer that's left is the NERDTree buffer
function! s:CloseIfOnlyNerdTreeLeft()
    if exists("t:NERDTreeBufName")
        if bufwinnr(t:NERDTreeBufName) != -1
            if winnr("$") == 1
                q
            endif
        endif
    endif
endfunction

" notes.vim {{{2
let g:notes_location=glob("~/Docs/Notes")

" Scratch {{{2
noremap <leader>s :call ToggleMyScratch()<CR>

" Supertab {{{2
let g:SuperTabDefaultCompletionType = "context"

" Load abbreviations
if filereadable(expand("~/.vim/abbrev"))
    source ~/.vim/abbrev
endif

" Modelines: {{{1
" vim: nowrap fdm=marker ft=vim
" }}}
