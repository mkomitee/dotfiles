" dein scripts
if &compatible
  set nocompatible               " Be iMproved
endif

" Required:
set runtimepath+=~/.vim/bundles/repos/github.com/Shougo/dein.vim

" Required:
if dein#load_state(expand('~/.vim/bundles'))
  call dein#begin(expand('~/.vim/bundles'))

  " Let dein manage dein
  " Required:
  call dein#add(expand('~/.vim/bundles/repos/github.com/Shougo/dein.vim'))

  " Add or remove your plugins here:
  call dein#add('Shougo/neosnippet-snippets')
  call dein#add('Shougo/neosnippet.vim')
  call dein#add('airblade/vim-rooter')
  call dein#add('cespare/vim-toml')
  call dein#add('haya14busa/incsearch.vim')
  call dein#add('itchyny/lightline.vim')
  call dein#add('junegunn/fzf', { 'build': './install --all' })
  call dein#add('junegunn/fzf.vim')
  call dein#add('junegunn/vim-peekaboo')
  call dein#add('justinmk/vim-sneak')
  call dein#add('kshenoy/vim-signature')
  call dein#add('ludovicchabant/vim-gutentags')
  call dein#add('mhinz/vim-signify')
  call dein#add('mhinz/vim-startify')
  call dein#add('morhetz/gruvbox')
  call dein#add('pelodelfuego/vim-swoop')
  call dein#add('rgarver/Kwbd.vim')
  call dein#add('romainl/vim-qlist')
  call dein#add('sheerun/vim-polyglot')
  call dein#add('simnalamburt/vim-mundo')
  call dein#add('t9md/vim-choosewin')
  call dein#add('tpope/vim-abolish')
  call dein#add('tpope/vim-commentary')
  call dein#add('tpope/vim-endwise')
  call dein#add('tpope/vim-fugitive')
  " call dein#add('tpope/vim-markdown')
  call dein#add('tpope/vim-repeat')
  call dein#add('tpope/vim-sensible')
  call dein#add('tpope/vim-speeddating')
  call dein#add('tpope/vim-surround')
  call dein#add('tpope/vim-unimpaired.git')
  call dein#add('tweekmonster/fzf-filemru')
  call dein#add('w0rp/ale')
  call dein#add('wellle/targets.vim')
  call dein#add('xolox/vim-misc')
  call dein#add('xolox/vim-session')

  call dein#add('vim-pandoc/vim-pandoc')
  call dein#add('vim-pandoc/vim-pandoc-syntax')

  " Required:
  call dein#end()
  call dein#save_state()
endif

" Required:
filetype plugin indent on
syntax enable

" If you want to install not installed plugins on startup.
if dein#check_install()
  call dein#install()
endif

" End dein Scripts

" Clear my custom augroup.
augroup custom
  autocmd!
augroup END

" Preferences
colorscheme gruvbox
set background=dark

let mapleader = " "
let localleader = '\\'

set autoread             " reload files if modified outside of vim & safe
set hidden               " Allow for hidden buffers
set list                 " show invisibles
set showbreak=↪          " indicate a line is the continuation of a wrapped line
set showmatch            " show matching parenthesis
set showcmd              " show partial commands
set foldlevelstart=99    " Start with all folds open
set dictionary=/usr/share/dict/words        " for spell checking
set spellfile=~/.dotfiles/vim/en.utf-8.add  " to add words
set spelllang=en_us      " yes, i do speak it
set spellsuggest=best,10 " only display the 10 best suggestions
set number               " line numbers
set nostartofline        " don't move the cursor to the start of the line when
                         " we move vertically in the buffer
set pumheight=10         " show no more than 10 entries in completion menus
set sidescroll=1         " scroll horizontally by 1
set ignorecase           " ignore case when searching, ...
set smartcase            " unless I search for uppercase
set hlsearch             " and highlight searches
set backupdir=$HOME/.vim/data/vimbackup/ " save backups in alternate location
set directory=$HOME/.vim/data/vimswap/   " save swap files here
set viewdir=$HOME/.vim/data/vimviews/    " save views here
set wildmenu              " commandline completion is nice
set expandtab             " by default, use spaces & no tabs
set shiftwidth=4          " shift width (>> & autoindent)
set softtabstop=4         " 1 soft-tab = 4 spaces
set textwidth=80          " wrap at 80 columns
set tags=./tags;          " name of the tags files which is relative to the project
set nojoinspaces          " 1 space when joining lines at a period, not 2
set notimeout             " don't timeout mappings
set modeline              " allow vim config in files
set exrc                  " allow local vimrcs
set secure                " limit valid commands in local vimrcs
set grepprg=rg\ --vimgrep " use rg for vim-grep
set splitbelow            " split below instead of above
set splitright            " split to the right instead of the left
set colorcolumn=+1        " highlight the color column+1
set breakindent           " visually indent wrapped lines
set showbreak=⣿⣿⣿⣿⣿
set infercase
set synmaxcol=800
set undofile              " track undo history
set undodir=$HOME/.vim/data/vimundo/ " place undo history here
set clipboard^=unnamed,unnamedplus " integrate with the system clipboard.

set fillchars=         " reset fillchars
set fillchars+=fold:-  " fill foldtext with dashes
set fillchars+=diff:⣿  " indicate deleted lines in diffs with ⣿
set fillchars+=vert:│  " indicate vertical splits with │
set fillchars+=stlnc:━ " indicate horizontal splits with -

set listchars=            " reset listchars
set listchars+=tab:▸\     " display tabs
set listchars+=extends:❯  " hint that theres more to the right, ...
set listchars+=precedes:❮ " hint that theres more to the left, ...

set shortmess=   " reset shortmess
set shortmess+=f " '(3 of 5)' instead of '(file 3 of 5)'
set shortmess+=i " '[noeol] instead of '[Incompelte last line]'
set shortmess+=l " '999L, 888C' instead of '999 lines, 888 characters'
set shortmess+=m " '[+]' instead of '[Modified]'
set shortmess+=n " '[New]' instead of '[New File]'
set shortmess+=r " '[RO]' instead of '[readonly]'
set shortmess+=w " '[w]' instead of 'written' '[a]' instead of 'appended'
set shortmess+=x " '[dos]' instead of '[dos format]', '[unix]' instead of
                 "  '[unix format]', '[mac]' instead of '[mac format]'
set shortmess+=o " overwrite message for writing a file with subsequent message
                 "  for reading a file (useful for ":wn" or when 'autowrite' on)
set shortmess+=O " message for reading a file overwrites any previous message.
                 "  Also for quickfix message (e.g., ":cn").
set shortmess+=t " truncate file message at the start if it is too long to fit
                 "  on the command-line, "<" will appear in the left most column.
                 "  Ignored in Ex mode.
set shortmess+=T " truncate other messages in the middle if they are too long to
                 "  fit on the command line.  "..." will appear  in the middle.
                 "  Ignored in Ex mode.
set shortmess+=I " don't give the intro message when starting Vim |:intro|.

set completeopt=         " reset completeopt
set completeopt+=preview
set completeopt+=menuone " show the menu when there are matches
set completeopt+=noselect " show the menu when there are matches

set viminfo+=n~/.vim/data/viminfo " move the viminfo file into ~/.vim/data

set virtualedit=        " reset virtualedit
set virtualedit+=block  " can move past the end of the line in visual block mode
set virtualedit+=insert " can move past the end of the line in insert mode

set formatoptions=   " reset formatoptions
set formatoptions+=c " autowrap comments using textwidth
set formatoptions+=q " format comments with gq
set formatoptions+=n " recognize numbered lists
set formatoptions+=j " joining comments deletes comment leader

set wildignore=                                     " reset wildignore
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/CVS/*   " ignore vcs directories
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg      " ignore images
set wildignore+=*.o,*.so,*.out                      " ignore compiled objects
set wildignore+=*.sw?                               " ignore swap files
set wildignore+=*.DS_Store                          " ignore mac crap
set wildignore+=*.pyc,*.pyo                         " ignore compiled python
set wildignore+=*.log,*.LOG                         " ignore log files
set wildignore+=*.[12345678]                        " ignore rotated logs
set wildignore+=*.gz,*.tar,*.tgz,*.bz2,*.cpio,*.rpm " ignore archives
set wildignore+=*.ignore                            " ignore extras
set wildignore+=*/__pycache__/*                     " ignore more compiled objects

set diffopt=           " reset diffopt
set diffopt+=filler    " add filler
set diffopt+=vertical  " vertical diff by default

" [S]plit lines (sister to [J]oin line)
function! s:SplitLine()
  exe "normal! i\<CR>\<Esc>^gk"
  silent! substitute/\v +$//
  silent! nohlsearch
  call histdel("search", -1)
  normal! $
endfunction
nnoremap S :call <SID>SplitLine()<CR>

function! Preserve(command)
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

function! RemoveTrailingWhiteSpace()
    " Allow a buffer local variable trailing_witespace_ok  to permit trailing
    " whitspace -- sometimes I need to do this if im editing someone elses code
    " and don't want to own the entire file in vcs. Enable it with let
    " trailing_witespace_ok=1, disable it with unlet trailing_witespace_ok
    if !exists("b:trailing_whitespace_ok")
        call Preserve("%s/\\s\\+$//e")
    endif
endfun

function! RestoreCursorPosition()
    " Restore cursor position to the last time you were in the file, this uses
    " marks so it's dependent on viminfo
    for ft in ['gitcommit', 'hgcommit', 'cvs', 'svn']
        if &filetype==ft
            return
        endif
    endfor
    normal! g`"
    normal! zz
endfunction

" Try really hard to use the correct syntax highlighting
autocmd custom BufEnter * :syntax sync fromstart

" Tweak basic navigation
nnoremap j gj
nnoremap k gk
nnoremap $ g$

nnoremap gj j
nnoremap gk k
nnoremap g$ $

onoremap j gj
onoremap k gk
onoremap $ g$

onoremap gj j
onoremap gk k
onoremap g$ $

vnoremap j gj
vnoremap k gk
vnoremap $ g$

vnoremap gj gj
vnoremap gk gk
vnoremap g$ g$

" smart-home: ^ and 0 will toggle between one another {{{
nnoremap <expr> ^ col('.') == match(getline('.'),'\S')+1 ? 'g0' : 'g^'
vnoremap <expr> ^ col('.') == match(getline('.'),'\S')+1 ? 'g0' : 'g^'
onoremap <expr> ^ col('.') == match(getline('.'),'\S')+1 ? 'g0' : 'g^'
nnoremap <expr> 0 col('.') == 1 ? 'g^' : 'g0'
vnoremap <expr> 0 col('.') == 1 ? 'g^' : 'g0'
onoremap <expr> 0 col('.') == 1 ? 'g^' : 'g0'

" When using marks, all by default mark columns as well
nnoremap ' `

" Simple map to disable highlighting
nnoremap // :nohl<cr>

" Reselect visually selected text after indenting
vnoremap > >gv
vnoremap < <gv

" sudo write-file in case you're in a file you dont have privileges to write{{{
cmap w!! w !sudo tee % >/dev/null<cr>

" . returns to starting place after repeat
nnoremap . .`[

" Don't move when you use */#
" https://twitter.com/dotvimrc/status/428208518487764992
nnoremap <silent> * :let b:pos = winsaveview()<cr>*:call winrestview(b:pos)<cr>
nnoremap <silent> # :let b:pos = winsaveview()<cr>#:call winrestview(b:pos)<cr>

" File commands
nnoremap <leader>fed :e $HOME/.dotfiles/vim/vimrc<CR>
nnoremap <leader>ff :FilesMru --tiebreak=end<CR>
nnoremap <leader>fm :History<CR>
nnoremap <leader>fh :History<CR>

" Project commands
nnoremap <leader>pf :ProjectMru<CR>
nnoremap <leader>pg :GFiles<CR>

" Buffer commands
nnoremap <leader>bb :Buffers<CR>
nnoremap <leader>bd :Kwbd<CR>
nnoremap <leader>bn :bnext<CR>
nnoremap <leader>bp :bprev<CR>
nnoremap <leader>bq :copen<CR>
nnoremap <leader>bl :lopen<CR>
nnoremap <leader>b<tab> <C-^>
nnoremap <C-C><Left> <C-^>

command! -bang Notes call fzf#run(fzf#wrap
      \  ('my-stuff', {'dir': '~/notes',
      \                'source': 'rg --files -g "*.md" -g "!archive/" -g "!contrib/"'
      \               },
      \  <bang>0)
      \ )
nnoremap <leader>an :Notes<cr>
nnoremap <leader>at :terminal ++curwin<cr>

" Other commands
nnoremap <leader>as :call Swoop()<cr>
vnoremap <leader>as :call SwoopSelection()<cr>
nnoremap <leader>aS :call Swoop()<cr>
vnoremap <leader>aS :call SwoopMultiSelection()<cr>
" Replace word under cursor, everywhere in the file.
nnoremap <leader>r. :%s/\<C-r><C-w>\>/
" Replace visually selected characters, everywhere in the file.
vnoremap <leader>rv "hy:%s/<C-r>h/
nnoremap <leader>au :MundoToggle<cr>

" Tag commands
nnoremap <leader>tt :Tags<cr>
" go to definition / tag
nnoremap <leader>td <C-]>
" go to tag in a split
nnoremap <leader>twd <C-w>}
nnoremap <leader>tn :tnext<cr>
nnoremap <leader>tp :tprevious<cr>

" Window commands
nnoremap <leader>w= <C-W>=
nnoremap <leader>w> <C-W>>
nnoremap <leader>w< <C-W><
nnoremap <leader>w<right> <C-W>>
nnoremap <leader>w<left> <C-W><
nnoremap <leader>w<down> <C-W>-
nnoremap <leader>w<up> <C-W>+
nnoremap <leader>w- <C-W>s
nnoremap <leader>w/ <C-W>v
nnoremap <leader>wj <C-W>j
nnoremap <leader>wh <C-W>h
nnoremap <leader>wk <C-W>k
nnoremap <leader>wl <C-W>l
nnoremap <leader>wd <C-W>c
nnoremap <leader>wL <C-W>r
nnoremap <leader>wH <C-W>R
nnoremap <leader>ww :Windows<cr>
nnoremap <leader>w<tab> <C-W>p
" This only works with nmap, nnoremap :-(
nmap <leader>w? <Plug>(choosewin)


" Git commands
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gc :Gcommit -v<cr>
nnoremap <leader>gl :Glog<cr>
nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gb :Gblame<cr>
nnoremap <leader>gf :GFiles<CR>

let g:ale_sign_column_always = 1
let g:ale_fixers = {
      \  'python': [
      \    'yapf',
      \    'isort',
      \    'add_blank_lines_for_python_control_statements',
      \    'remove_trailing_lines',
      \    'trim_whitespace',
      \  ],
      \ }
let g:ale_set_quickfix = 1
let g:ale_set_loclist = 0

let g:lightline = {
      \ 'active': {
      \   'left': [['mode', 'paste'], ['filename', 'filetype', 'modified']],
      \   'right': [['lineinfo'], ['percent'], ['readonly', 'linter_warnings', 'linter_errors', 'linter_ok']]
      \ },
      \ 'component_expand': {
      \   'linter_warnings': 'LightlineLinterWarnings',
      \   'linter_errors': 'LightlineLinterErrors',
      \   'linter_ok': 'LightlineLinterOK'
      \ },
      \ 'component_type': {
      \   'readonly': 'error',
      \   'linter_warnings': 'warning',
      \   'linter_errors': 'error'
      \ },
      \ }

function! LightlineLinterWarnings() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ◆', all_non_errors)
endfunction

function! LightlineLinterErrors() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ✗', all_errors)
endfunction

function! LightlineLinterOK() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '✓ ' : ''
endfunction

autocmd custom User ALELint call s:MaybeUpdateLightline()

" Update and show lightline but only if it's visible (e.g., not in Goyo)
function! s:MaybeUpdateLightline()
  if exists('#lightline')
    call lightline#update()
  end
endfunction

"nnoremap ≈ :Commands<cr>
nnoremap <M-x> :Commands<cr>
nnoremap <leader>hh :help ShortcutContents<cr>
nnoremap <leader>ht :Helptags<cr>
nnoremap <leader>h. :help <C-r><C-w><cr>

nnoremap <leader>qq :qall<cr>
nnoremap <leader>qr :RestartVim<cr>

command! -bang -nargs=* Rg
      \ call fzf#vim#grep(
      \ 'rg --column --line-number --no-heading --smart-case --color=always '.shellescape(<q-args>),
      \ 1,
      \ <bang>0 ? fzf#vim#with_preview('up:60%')
      \         : fzf#vim#with_preview('right:50%:hidden', '?'),
      \ <bang>0)

" quickfix customizations
autocmd custom FileType qf nnoremap <buffer> q :q<cr>
autocmd custom FileType qf set nobuflisted
autocmd custom FileType qf setlocal nolist
autocmd custom FileType qf setlocal norelativenumber
autocmd custom FileType qf setlocal nowrap
autocmd custom FileType qf setlocal number

" locationlist customizations
autocmd custom FileType ll nnoremap <buffer> q :q<cr>
autocmd custom FileType ll set nobuflisted
autocmd custom FileType ll setlocal nolist
autocmd custom FileType ll setlocal norelativenumber
autocmd custom FileType ll setlocal nowrap
autocmd custom FileType ll setlocal number

" make customizations
autocmd custom FileType make autocmd BufWritePre <buffer> call RemoveTrailingWhiteSpace()
autocmd custom FileType make setlocal noexpandtab
autocmd custom FileType make setlocal nosmarttab
autocmd custom FileType make setlocal softtabstop=0
autocmd custom FileType make setlocal tabstop=4

" go customizations
autocmd custom FileType go autocmd BufWritePre <buffer> call RemoveTrailingWhiteSpace()
autocmd custom FileType go setlocal noexpandtab
autocmd custom FileType go setlocal shiftwidth=4
autocmd custom FileType go setlocal tabstop=4

" yaml customizations
autocmd custom FileType yaml autocmd BufWritePre <buffer> call RemoveTrailingWhiteSpace()
autocmd custom FileType yaml setlocal shiftwidth=4

" man page customizations
autocmd custom FileType man nnoremap <buffer> q :q<cr>
autocmd custom FileType man setlocal nolist
autocmd custom FileType man setlocal nomodifiable
autocmd custom FileType man setlocal nomodified
autocmd custom FileType man setlocal norelativenumber
autocmd custom FileType man setlocal number

" markdown customizations
autocmd custom FileType markdown,pandoc autocmd BufWritePre <buffer> call RemoveTrailingWhiteSpace()
autocmd custom FileType markdown,pandoc iabbrev <expr> <buffer> :date: '<'.strftime("%Y-%m-%d %a").'>'
autocmd custom FileType markdown,pandoc setlocal complete+=kspell
autocmd custom FileType markdown,pandoc setlocal shiftwidth=4
autocmd custom FileType markdown,pandoc setlocal softtabstop=4
autocmd custom FileType markdown,pandoc setlocal spell
autocmd custom FileType markdown,pandoc setlocal foldlevel=2
autocmd custom FileType markdown,pandoc nnoremap <buffer> <leader>mp :MarkdownPublish<cr>
" styles
autocmd custom FileType pandoc nmap <buffer> <leader>msi <Plug>(pandoc-keyboard-toggle-emphasis)
autocmd custom FileType pandoc vmap <buffer> <leader>msi <Plug>(pandoc-keyboard-toggle-emphasis)
autocmd custom FileType pandoc nmap <buffer> <leader>msb <Plug>(pandoc-keyboard-toggle-strong)
autocmd custom FileType pandoc vmap <buffer> <leader>msb <Plug>(pandoc-keyboard-toggle-strong)
autocmd custom FileType pandoc nmap <buffer> <leader>ms` <Plug>(pandoc-keyboard-toggle-verbatim)
autocmd custom FileType pandoc vmap <buffer> <leader>ms` <Plug>(pandoc-keyboard-toggle-verbatim)
autocmd custom FileType pandoc nmap <buffer> <leader>ms~ <Plug>(pandoc-keyboard-toggle-strikeout)
autocmd custom FileType pandoc vmap <buffer> <leader>ms~ <Plug>(pandoc-keyboard-toggle-strikeout)
autocmd custom FileType pandoc nmap <buffer> <leader>ms^ <Plug>(pandoc-keyboard-toggle-superscript)
autocmd custom FileType pandoc vmap <buffer> <leader>ms^ <Plug>(pandoc-keyboard-toggle-superscript)
autocmd custom FileType pandoc nmap <buffer> <leader>ms_ <Plug>(pandoc-keyboard-toggle-subscript)
autocmd custom FileType pandoc vmap <buffer> <leader>ms_ <Plug>(pandoc-keyboard-toggle-subscript)
autocmd custom FileType pandoc vmap <buffer> <silent> aPe <Plug>(pandoc-keyboard-select-emphasis-inclusive)
autocmd custom FileType pandoc vmap <buffer> <silent> iPe <Plug>(pandoc-keyboard-select-emphasis-exclusive)
autocmd custom FileType pandoc omap <buffer> aPe :normal vaPe<cr>
autocmd custom FileType pandoc omap <buffer> iPe :normal viPe<cr>
autocmd custom FileType pandoc vmap <buffer> <silent> aPs <Plug>(pandoc-keyboard-select-strong-inclusive)
autocmd custom FileType pandoc vmap <buffer> <silent> iPs <Plug>(pandoc-keyboard-select-strong-exclusive)
autocmd custom FileType pandoc omap <buffer> aPs :normal vaPs<cr>
autocmd custom FileType pandoc omap <buffer> iPs :normal viPs<cr>
autocmd custom FileType pandoc vmap <buffer> <silent> aPv <Plug>(pandoc-keyboard-select-verbatim-inclusive)
autocmd custom FileType pandoc vmap <buffer> <silent> iPv <Plug>(pandoc-keyboard-select-verbatim-exclusive)
autocmd custom FileType pandoc omap <buffer> aPv :normal vaPv<cr>
autocmd custom FileType pandoc omap <buffer> iPv :normal viPv<cr>
autocmd custom FileType pandoc vmap <buffer> <silent> aPk <Plug>(pandoc-keyboard-select-strikeout-inclusive)
autocmd custom FileType pandoc vmap <buffer> <silent> iPk <Plug>(pandoc-keyboard-select-strikeout-exclusive)
autocmd custom FileType pandoc omap <buffer> aPk :normal vaPk<cr>
autocmd custom FileType pandoc omap <buffer> iPk :normal viPk<cr>
autocmd custom FileType pandoc vmap <buffer> <silent> aPu <Plug>(pandoc-keyboard-select-superscript-inclusive)
autocmd custom FileType pandoc vmap <buffer> <silent> iPu <Plug>(pandoc-keyboard-select-superscript-exclusive)
autocmd custom FileType pandoc omap <buffer> aPu :normal vaPu<cr>
autocmd custom FileType pandoc omap <buffer> iPu :normal viPu<cr>
autocmd custom FileType pandoc vmap <buffer> <silent> aPt <Plug>(pandoc-keyboard-select-subscript-inclusive)
autocmd custom FileType pandoc vmap <buffer> <silent> iPt <Plug>(pandoc-keyboard-select-subscript-exclusive)
autocmd custom FileType pandoc omap <buffer> aPt :normal vaPl<cr>
autocmd custom FileType pandoc omap <buffer> iPt :normal viPl<cr>
" sections
autocmd custom FileType pandoc nmap <buffer> <leader>m# <Plug>(pandoc-keyboard-apply-header)
autocmd custom FileType pandoc nmap <buffer> <leader>mhd <Plug>(pandoc-keyboard-remove-header)
autocmd custom FileType pandoc nmap <buffer> <leader>mhn <Plug>(pandoc-keyboard-next-header)
autocmd custom FileType pandoc nmap <buffer> <leader>mhb <Plug>(pandoc-keyboard-prev-header)
autocmd custom FileType pandoc nmap <buffer> <leader>mhh <Plug>(pandoc-keyboard-cur-header)
autocmd custom FileType pandoc nmap <buffer> <leader>mhp <Plug>(pandoc-keyboard-cur-header-parent)
autocmd custom FileType pandoc nmap <buffer> <leader>mhsn <Plug>(pandoc-keyboard-next-header-sibling)
autocmd custom FileType pandoc nmap <buffer> <leader>mhsb <Plug>(pandoc-keyboard-prev-header-sibling)
autocmd custom FileType pandoc nmap <buffer> <leader>mhcf <Plug>(pandoc-keyboard-first-header-child)
autocmd custom FileType pandoc nmap <buffer> <leader>mhcl <Plug>(pandoc-keyboard-last-header-child)
autocmd custom FileType pandoc nmap <buffer> <leader>mhcn <Plug>(pandoc-keyboard-nth-header-child)
autocmd custom FileType pandoc nmap <buffer> ]] <Plug>(pandoc-keyboard-ff-header)
autocmd custom FileType pandoc nmap <buffer> [[ <Plug>(pandoc-keyboard-rw-header)
autocmd custom FileType pandoc nmap <buffer> ][ <Plug>(pandoc-keyboard-ff-sect-end)
autocmd custom FileType pandoc nmap <buffer> [] <Plug>(pandoc-keyboard-rw-sect-end)
autocmd custom FileType pandoc vmap <buffer> aS <Plug>(pandoc-keyboard-select-section-inclusive)
autocmd custom FileType pandoc omap <buffer> aS :normal VaS<cr>
autocmd custom FileType pandoc vmap <buffer> iS <Plug>(pandoc-keyboard-select-section-exclusive)
autocmd custom FileType pandoc omap <buffer> iS :normal ViS<cr>
" links
autocmd custom FileType pandoc nmap <buffer> <leader>mgl <Plug>(pandoc-keyboard-links-open)
autocmd custom FileType pandoc nmap <buffer> <leader>msl <Plug>(pandoc-keyboard-links-split)
autocmd custom FileType pandoc nmap <buffer> <leader>mgb <Plug>(pandoc-keyboard-links-back)
autocmd custom FileType pandoc nmap <buffer> <leader>mgB <Plug>(pandoc-keyboard-links-file-back)
" lists
autocmd custom FileType pandoc nmap <buffer> <leader>mln <Plug>(pandoc-keyboard-next-li)
autocmd custom FileType pandoc nmap <buffer> <leader>mlp <Plug>(pandoc-keyboard-prev-li)
autocmd custom FileType pandoc nmap <buffer> <leader>mll <Plug>(pandoc-keyboard-cur-li)
autocmd custom FileType pandoc nmap <buffer> <leader>mllp <Plug>(pandoc-keyboard-cur-li-parent)
autocmd custom FileType pandoc nmap <buffer> <leader>mlsn <Plug>(pandoc-keyboard-next-li-sibling)
autocmd custom FileType pandoc nmap <buffer> <leader>mlsp <Plug>(pandoc-keyboard-prev-li-sibling)
autocmd custom FileType pandoc nmap <buffer> <leader>mlcf <Plug>(pandoc-keyboard-first-li-child)
autocmd custom FileType pandoc nmap <buffer> <leader>mlcl <Plug>(pandoc-keyboard-last-li-child)
autocmd custom FileType pandoc nmap <buffer> <leader>mlcn <Plug>(pandoc-keyboard-nth-li-child)
" references
autocmd custom FileType pandoc nmap <buffer> <leader>mnr <Plug>(pandoc-keyboard-ref-insert)
autocmd custom FileType pandoc nmap <buffer> <leader>mrg <Plug>(pandoc-keyboard-ref-goto)
autocmd custom FileType pandoc nmap <buffer> <leader>mrb <Plug>(pandoc-keyboard-ref-backfrom)

let g:pandoc#keyboard#use_default_mappings = 0


" perl customizations
autocmd custom FileType perl autocmd BufWritePre <buffer> call RemoveTrailingWhiteSpace()
autocmd custom FileType perl setlocal iskeyword+=$,%,@

" puppet customizations
autocmd custom FileType puppet autocmd BufWritePre <buffer> call RemoveTrailingWhiteSpace()

" python customizations
autocmd custom FileType python autocmd BufWritePre <buffer> call RemoveTrailingWhiteSpace()
autocmd custom FileType python setlocal textwidth=79

" cython customizations
autocmd custom FileType pyrex autocmd BufWritePre <buffer> call RemoveTrailingWhiteSpace()
autocmd custom FileType pyrex setlocal textwidth=79

" ruby customizations
autocmd custom FileType ruby autocmd BufWritePre <buffer> call RemoveTrailingWhiteSpace()

" shell script customizations
autocmd custom FileType sh,zsh autocmd BufWritePre <buffer> call RemoveTrailingWhiteSpace()

" shell vimscript customizations
autocmd custom FileType vim autocmd BufWritePre <buffer> call RemoveTrailingWhiteSpace()
autocmd custom FileType vim setlocal shiftwidth=2
autocmd custom FileType vim setlocal softtabstop=2

" shell vim help page customizations
autocmd custom FileType help nnoremap <buffer> q :q<cr>
autocmd custom FileType help setlocal nolist
autocmd custom FileType help setlocal nomodifiable
autocmd custom FileType help setlocal nomodified
autocmd custom FileType help setlocal norelativenumber
autocmd custom FileType help setlocal number

" swoop buffer customizations
autocmd custom BufEnter swoopBuf nnoremap <buffer> q :bdelete!<cr>

" gitcommit customizations
autocmd custom FileType gitcommit setlocal complete+=kspell
autocmd custom FileType gitcommit setlocal spell

" netrw customizations
autocmd custom FileType netrw nnoremap <buffer> q :q<cr>
autocmd custom FileType netrw setlocal nolist
autocmd custom FileType netrw setlocal nomodifiable
autocmd custom FileType netrw setlocal nomodified
autocmd custom FileType netrw setlocal norelativenumber
autocmd custom FileType netrw setlocal number

" Always restore cursor position to the last place it was when a file was last
" opened.
autocmd custom BufReadPost * call RestoreCursorPosition()

silent execute '!mkdir -p $HOME/.vim/data/vimbackup'
silent execute '!mkdir -p $HOME/.vim/data/vimswap'
silent execute '!mkdir -p $HOME/.vim/data/vimviews'
silent execute '!mkdir -p $HOME/.vim/data/vimundo'
silent execute '!mkdir -p $HOME/.vim/data/tags'

let g:swoopUseDefaultKeyMap = 0

" Experimenting with incsearch, not sure if it has legs.
map / <Plug>(incsearch-forward)
map ? <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)


let g:mundo_help = 1
let g:mundo_preview_bottom = 1
let g:mundo_right = 1

let g:sneak#absolute_dir = 1

let g:fzf_filemru_bufwrite = 1
let g:fzf_filemru_git_ls = 1

let g:rooter_silent_chdir = 1
let g:rooter_use_lcd = 1

let g:python_highlight_all = 1

let g:markdown_fenced_languages = ['html', 'vim', 'python', 'bash=sh', 'sql']

function! MarkdownPublish()
  let s:basename = expand('%:r')
  let s:cmd = "gpp --nostdinc --nocurinc -H " . s:basename . ".md | "
        \ . "pandoc --standalone --toc --toc-depth=2 "
        \ . "--include-in-header=$HOME/.vim/contrib/pandoc/header.html "
        \ . "--include-before-body=$HOME/.vim/contrib/pandoc/before-body.html "
        \ . "--include-after-body=$HOME/.vim/contrib/pandoc/after-body.html "
        \ . "--to=html "
        \ . "--from=markdown+emoji "
        \ . "--output=" . s:basename . ".html"
  " echomsg s:cmd
  silent execute system(s:cmd)
endfunction

command! MarkdownPublish call MarkdownPublish()


let g:session_autoload = 'yes'
let g:session_autosave = 'yes'
let g:session_autosave_periodic = 5
let g:session_autosave_silent = 1
let g:session_default_to_last = 1
let g:session_menu = 0
let g:session_persist_colors = 0

let g:startify_bookmarks = [
      \ '$HOME/.dotfiles/vim/vimrc',
      \ '$HOME/.vimrc.local',
      \ '$HOME/.dotfiles/zshrc',
      \ '$HOME/.zshrc.local',
      \ '$HOME/.dotfiles/zshenv',
      \ '$HOME/.zshenv.local',
      \ '$HOME/.aliases',
      \ '$HOME/.vim/doc/shortcuts.txt',
      \]
"
" Experimentation
set concealcursor=iv
set conceallevel=2
set encoding=utf-8
set fileencoding=utf-8
set lazyredraw
set matchpairs+=<:>
set showfulltag
set termencoding=utf-8

nnoremap <leader>ah :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
      \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
      \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" refresh all the things.
nnoremap <silent> <c-l> :nohlsearch<cr>:diffupdate<cr>:syntax sync fromstart<cr><c-l>

" Abolish maps are in ~/.vim/after/plugin/abolish.vim
source ~/.vimrc.local
