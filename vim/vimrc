" Preamble {{{
set rtp+=~/.vim/bundle/vundle
call vundle#rc()

filetype on
filetype plugin on
filetype indent on
syntax enable

" Install Plugins {{{
Bundle 'gmarik/vundle'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'Lokaltog/vim-powerline'
Bundle 'Rainbow-Parenthsis-Bundle'
Bundle 'ajf/puppet-vim'
Bundle 'altercation/vim-colors-solarized'
Bundle 'benmills/vimux'
Bundle 'fholgado/minibufexpl.vim'
Bundle 'godlygeek/tabular'
Bundle 'int3/vim-extradite'
Bundle 'jmcantrell/vim-virtualenv'
Bundle 'kien/ctrlp.vim'
Bundle 'mkomitee/ShowMarks'
Bundle 'mkomitee/puppet-eyes'
Bundle 'scrooloose/nerdcommenter'
Bundle 'scrooloose/nerdtree'
Bundle 'sjl/badwolf'
Bundle 'sjl/clam.vim'
Bundle 'sjl/splice.vim'
Bundle 'tmatilai/gitolite.vim'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-markdown'
Bundle 'tpope/vim-surround'
Bundle 'tyru/current-func-info.vim'
" }}}


" Prepare our vim cache directories
silent execute '!mkdir -p $HOME/.vimdata/vimbackup'
silent execute '!mkdir -p $HOME/.vimdata/vimswap'
silent execute '!mkdir -p $HOME/.vimdata/vimviews'
silent execute '!mkdir -p $HOME/.vimdata/vimundo'
silent execute '!mkdir -p $HOME/.vimdata/ctrlp'

" }}}
" Preferences {{{
set encoding=utf-8               " Prefer utf-8 character encoding
set fileformats=unix,mac,dos     " Prefer unix style EOL's
set autoindent                   " Try to line up code intelligently
set showmode                     " Inform me as to what mode im in
set showcmd                      " Show partial commands
set hidden                       " Allow for hidden buffers
set noerrorbells                 " shutup
set novisualbell                 " shutup
set ttyfast                      " it's 2012. Send more characters, faster
set backspace=indent,eol,start   " Nothing is too sacred to be <BS>
set laststatus=2                 " Every window always gets a statusline
set history=10000                " Keep a lot of ex commands in history
set list                         " show invisibles
set listchars=                   " reset listchars
set listchars+=tab:▸\            " display tabs
set listchars+=eol:¶             " display eol
set listchars+=extends:❯         " hint that theres more to the right, ...
set listchars+=precedes:❮        " hint that theres more to the left, ...
set listchars+=trail:♦           " and indicate trailing whitespace
set showbreak=↪                  " indicate a line is the continuation of a
                                 " wrapped line
set matchtime=3                  " show matching parenthesis for 3/10 of a second
set showmatch                    " show matching parenthesis
set splitbelow                   " new horizontal splits to below
set splitright                   " new vertical splits goto the right
set fillchars=                   " reset fillchars
set fillchars+=fold:-            " fill foldtext with dashes
set fillchars+=diff:⣿            " indicate deleted lines in diffs with ⣿
set fillchars+=vert:❚            " indicate vertical splits with ❚
set shiftround                   " round indent to multiples of shiftwidth
set autoread                     " reread files which changes on disk if they
                                 " havnt changed in the buffer
set showfulltag                  " when completing a word from a tags file,
                                 " include extra info about the tag in the
                                 " completion menu
set shortmess=                   " reset shortmess
set shortmess+=f                 " '(3 of 5)' instead of '(file 3 of 5)'
set shortmess+=i                 " '[noeol] instead of '[Incompelte last line]'
set shortmess+=l                 " '999L, 888C' instead of '999 lines, 888 characters'
set shortmess+=m                 " '[+]' instead of '[Modified]'
set shortmess+=n                 " '[New]' instead of '[New File]'
set shortmess+=r                 " '[RO]' instead of '[readonly]'
set shortmess+=w                 " '[w]' instead of 'written'
                                 "  '[a]' instead of 'appended'
set shortmess+=x                 " '[dos]' instead of '[dos format]',
                                 "  '[unix]' instead of '[unix format]',
                                 "  '[mac]' instead of '[mac format]'
set shortmess+=o 
set shortmess+=O
set shortmess+=t
set shortmess+=T
set shortmess+=I
set foldlevelstart=99            " Start with all folds open
set nojoinspaces                 " Don't be fancy with join
set dictionary=/usr/share/dict/words
set spellfile=~/.dotfiles/vim/en.utf-8.add
set spelllang=en_us

" If we support it, use relative line numbers, otherwise use regular line
" numbers.
if has('&relativenumber')
    set relativenumber
else
    set number
endif

if exists('&undofile')
    set undofile         " Save undo history to a file for persistence
    set undoreload=10000 " Save the whole buffer for undo when reloading
    set undolevels=10000 " Save lots of data for undo
endif

set iskeyword-=:
set iskeyword-=;
set iskeyword-=,
set iskeyword+=_
set display+=lastline
set diffopt=filler,iwhite
set updatecount=10
set completeopt=longest,menu,menuone
set nostartofline
set viminfo='100,<50,s10,h,n~/.vimdata/viminfo
set pumheight=10
set report=0
set switchbuf=useopen,usetab
set scrolloff=5
set sidescroll=1
set sidescrolloff=10
set virtualedit+=block

if has('mouse')
    set mouse=a
endif

" }}}
" Searching & Movement {{{
set incsearch
set ignorecase
set smartcase
set hlsearch
set gdefault
set matchpairs+=<:>
set magic

noremap <leader><space> :nohl<cr>:call clearmatches()<cr>

" j and k will go one line, even if they're wrapped
nnoremap j gj
nnoremap k gk

" when using marks, all by default mark columns as well
nnoremap ' `

" }}}
" Disable annoying maps {{{
noremap <F1> <nop>

" }}}
" Disable Arrow Keys {{{

nnoremap <Left> 8<C-w><
nnoremap <Right> 8<C-w>>
nnoremap <Up> 8<C-w>+
nnoremap <Down> 8<C-w>-

inoremap <Left> <Nop>
inoremap <Right> <Nop>
inoremap <Up> <Nop>
inoremap <Down> <Nop>
vnoremap <Left> <Nop>
vnoremap <Right> <Nop>
vnoremap <Up> <Nop>
vnoremap <Down> <Nop>

" }}}
" Defaults for tabs, spaces, & wrapping {{{
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set smarttab
set wrap
set textwidth=80
set formatoptions=croqln

" }}}
" Backups & State {{{
set backupdir=$HOME/.vimdata/vimbackup/
set directory=$HOME/.vimdata/vimswap/
set viewdir=$HOME/.vimdata/vimviews/
if exists('&undofile')
    set undodir=$HOME/.vimdata/vimundo/
endif

" }}}
" Wildmode {{{
set wildmenu
set wildmode=longest:full,list:full

set wildignore+=.git,.hg,.svn,CVS
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg
set wildignore+=*.o,*.so,*.out
set wildignore+=*.sw?
set wildignore+=*.DS_Store
set wildignore+=*.pyc,*.pyo

" }}}
" Typos {{{
command! -bang E e<bang>
command! -bang Q q<bang>
command! -bang W w<bang>
command! -bang QA qa<bang>
command! -bang Qa qa<bang>
command! -bang Wa wa<bang>
command! -bang WA wa<bang>
command! -bang Wq wq<bang>
command! -bang WQ wq<bang>

" }}}
" Colorscheme {{{
set background=dark
let g:solarized_termtrans = 1
colorscheme solarized
call togglebg#map("<F5>")
hi SignColumn    ctermfg=10 ctermbg=0 guifg=#586e75 guibg=#073642"
hi ShowMarksHLl  ctermfg=1 ctermbg=0 guifg=#586e75 guibg=#073642"
hi ShowMarksHLu  ctermfg=9 ctermbg=0 guifg=#cb4b16 guibg=#073642"
hi ShowMarksHLo  ctermfg=5 ctermbg=0 guifg=#d33682 guibg=#073642"
hi ShowMarksHLm  ctermfg=6 ctermbg=0 guifg=#2aa198 guibg=#073642"
let g:Powerline_colorscheme="skwp"
let g:Powerline_theme="mkomitee"

" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" Use a bar-shaped cursor for insert mode, even through tmux.
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif
set guicursor=n-v-c:block-Cursor
set guicursor+=i:ver20-Cursor-blinkon600-blinkoff600
set guicursor+=n-v-c:block-Cursor-blinkon600-blinkoff600

" }}}
" Leaders {{{
let mapleader = ","
let localleader = '\\'

" }}}
" AutoCommands {{{
" This may cause a lot of processing, but we can disable it if it causes problems
augroup showmarks
    au!
    au BufWinEnter * execute 'ShowMarksOn'
    au BufEnter    * execute 'ShowMarksOn'
    au CursorMoved * execute 'ShowMarksOn'
augroup END

augroup nerdtree
    au!
    autocmd WinEnter * call s:CloseIfOnlyNerdTreeLeft()
augroup END

augroup vimmemory
    au!
    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    " Also don't do it when the mark is in the first line, that is the default
    " position when opening a file.
    au BufReadPost *
                \ if line("'\"") > 1 && line("'\"") <= line("$")  |
                \   exe "normal! g`\"" |
                \ endif
    " use views to restore more state
    au BufWinLeave * silent! mkview
    au BufWinEnter * silent! loadview
augroup END


" }}}
" Toggles & Switches (Leader commands) {{{

nnoremap // :nohl<cr>

"C-{hjkl} to move text or text blocks left down up or right
inoremap <C-j> <Esc>:m+<CR>==gi
inoremap <C-k> <Esc>:m-2<CR>==gi
inoremap <C-h> <Esc><<`]a
inoremap <C-l> <Esc>>>`]a
vnoremap <C-j> :m'>+<CR>gv=gv
vnoremap <C-k> :m-2<CR>gv=gv
vnoremap <C-h> <gv
vnoremap <C-l> >gv

if bufwinnr(1)
    noremap + <c-W>+
    noremap - <c-W>-
endif

" Easier navigation between open windows
nnoremap <C-k> <C-W>k
nnoremap <C-j> <C-W>j
nnoremap <C-h> <C-W>h
nnoremap <C-l> <C-W>l
nnoremap <C-Right> <C-W>l
nnoremap <C-Left> <C-W>h
nnoremap <C-Up> <C-W>k
nnoremap <C-Down> <C-W>j

" Reselect visually selected text after indenting
vnoremap > >gv
vnoremap < <gv

" Select the last edited/pasted text
nnoremap gv `[v`]
nnoremap <Leader>= <C-W>=

" make Y consistant with C and D
noremap Y y$

" Easily modify vimrc
nnoremap <leader>ev :e $MYVIMRC<CR>
nnoremap <leader>egv :e$MYGVIMRC<CR>
nnoremap <leader>sv :so $MYVIMRC<CR>
nnoremap <leader>sgv :so $MYGVIMRC<CR>

" Move visual selection back/forwards
set ww+=<,>
vnoremap <C-Left> x<Left>P`[v`]
vnoremap <C-Right> x<Right>P`[v`]

" sudo write-file in case you opened a file you dont have privileges to write
cmap w!! w !sudo tee % >/dev/null<cr>

" Smarter Pasting!
nnoremap <Leader>P :set paste<CR>"*p;set nopaste<CR>


" }}}
" Custom commands and functions {{{
" Diff against whats on disk {{{
nnoremap <Leader>do :call DiffOrig()<CR>
if !exists(":DiffOrig")
    command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
                \ | wincmd p | diffthis
endif

" }}}
"
" }}}
" Configure plugins  {{{
" minibufexplorer {{{
let g:miniBufExplSplitBelow = 0
let g:miniBufExplMapCTabSwitchBufs = 1

" }}}
" Python-Mode {{{
" let g:pymode_lint_write = 0
" let g:pymode_utils_whitespaces = 0

" }}}
" Ctrl+P {{{
let g:ctrlp_extensions = ['tag', 'buffertag', 'quickfix', 'dir']
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_cache_dir = $HOME.'/.vimdata/ctrlp'
let g:ctrlp_max_depth = 10
let g:ctrlp_mruf_relative = 1
let g:ctrlp_jump_to_buffer = 0
let g:ctrlp_working_path_mode = 0
let g:ctrlp_open_new_file = 'r'
let g:ctrlp_open_multi = '1vr'
let g:ctrlp_dont_split = 'netrw\|help'
nnoremap <c-b> :CtrlPBuffer<CR>
nnoremap <leader>b :CtrlPBuffer<CR>
nnoremap <leader>r :CtrlPMRU<CR>
nnoremap <c-t> :CtrlPBufTagAll<CR>
nnoremap <c-q> :CtrlPQuickfix<CR>
" }}}
" Powerlines {{{
if has('mac')
    let g:Powerline_cache_file = expand('~') . "/.vimdata/powerline.cache.mac"
    let g:Powerline_symbols = 'fancy'
else
    let g:Powerline_cache_file = expand('~') . "/.vimdata/powerline.cache"
    let g:Powerline_symbols = 'unicode'
end

" }}}
" Tabularize  {{{
vnoremap <silent> <Leader>a=> :Tabularize /=>/l1l1<CR>
vnoremap <silent> <Leader>a= :Tabularize /=/l1l1<CR>
vnoremap <silent> <Leader>a, :Tabularize /,/l0l1<CR>
vnoremap <silent> <Leader>a: :Tabularize /:/l0l1<CR>

" }}}
" Showmarks {{{
let g:showmarks_enable=1
let g:showmarks_include="'`\"^<>.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789[](){}"
let g:showmarks_ignore_type=''
let g:showmarks_textlower="\t"
let g:showmarks_textupper="\t"
let g:showmarks_textother="\t"

" }}}
" NERDCommenter {{{
" When we comment something with the NERDComment Toggle, reselect
let g:NERDCreateDefaultMappings = 0
let g:NERDTreeMinimalUI = 1
let g:NERDTreeDirArrows = 1

let g:NERDSpaceDelims = 1
vmap <leader>cc <plug>NERDCommenterToggle<cr>vgv
nmap <leader>cc <plug>NERDCommenterToggle
vmap <leader>cb <plug>NERDCommenterSexy<cr>vgv
nmap <leader>cb <plug>NERDCommenterSexy
vmap <leader>c<space> <plug>NERDCommenterToggle<cr>vgv
nmap <leader>c<space> <plug>NERDCommenterToggle
nmap <leader>c$ <plug>NERDCommenterToEOL

" }}}
" NERDTree.vim {{{
let g:NERDTreeUseExistingWindows = 1
let NERDTreeIgnore=['\~$', '\.swp$', '^CVS$', '\.svn$', '^CVSROOT$', '^\.git$', '\.pyc$', '\.pyo$', '\.swp$']
noremap <Leader>dd :NERDTreeToggle<CR>
noremap <Leader>df :NERDTreeFind<CR>
let NERDTreeShowBookmarks=0
let NERDTreeQuitOnOpen=0
let NERDTreeHighlightCursorLine=0
let NERDTreeHijackNetrw=1

" Close all open buffers on entering a window if the only
" buffer that's left is the NERDTree buffer
function! s:CloseIfOnlyNerdTreeLeft()
    if exists("t:NERDTreeBufName")
        if bufwinnr(t:NERDTreeBufName) != -1
            if winnr("$") == 1
                q
            endif
        endif
    endif
endfunction

" }}}
" }}}
" Load abbreviations {{{
if filereadable(expand("~/.vim/abbrev"))
    source ~/.vim/abbrev
endif

" }}}
" Modelines: {{{
" vim: nowrap fdm=marker ft=vim
"
" }}}
