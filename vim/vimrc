set nocompatible
" filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Load Plugins
Bundle 'gmarik/vundle'
Bundle 'AfterColors.vim'
Bundle 'Lokaltog/vim-distinguished'
Bundle 'ajf/puppet-vim'
Bundle 'ervandew/supertab.git'
Bundle 'godlygeek/tabular'
Bundle 'jpalardy/vim-slime'
Bundle 'kana/vim-smartinput.git'
Bundle 'kana/vim-textobj-indent.git'
Bundle 'kana/vim-textobj-user.git'
Bundle 'kien/ctrlp.vim'
Bundle 'kshenoy/vim-signature'
Bundle 'majutsushi/tagbar'
Bundle 'mkomitee/snipmate.vim'
Bundle 'python_match.vim'
Bundle 'scrooloose/nerdcommenter'
Bundle 'scrooloose/snipmate-snippets'
Bundle 'tmatilai/gitolite.vim'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-git'
Bundle 'tpope/vim-markdown'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-surround'
Bundle 'xolox/vim-easytags'

syntax on
filetype plugin indent on

" Prepare our vim cache directories
silent execute '!mkdir -p $HOME/.vimdata/vimbackup'
silent execute '!mkdir -p $HOME/.vimdata/vimswap'
silent execute '!mkdir -p $HOME/.vimdata/vimviews'
silent execute '!mkdir -p $HOME/.vimdata/vimundo'
silent execute '!mkdir -p $HOME/.vimdata/ctrlp'

" Preferences
set encoding=utf-8             " Prefer utf-8 character encoding
set autoindent                 " Try to line up code intelligently
set hidden                     " Allow for hidden buffers
set backspace=indent,eol,start " Nothing is too sacred to be <BS>
set laststatus=2               " Every window always gets a statusline
set history=10000              " Keep a lot of ex commands in history
set list                       " show invisibles
set showbreak=↪                " indicate a line is the continuation of a
                               "  wrapped line
set showmatch                  " show matching parenthesis
set splitbelow                 " new horizontal splits to below
set splitright                 " new vertical splits goto the right
set autoread                   " reread files which changes on disk if they
                               "  havnt changed in the buffer
set showfulltag                " when completing a word from a tags file,
                               " include extra info about the tag in the
                               " completion menu
set foldlevelstart=99          " Start with all folds open
set nojoinspaces               " Don't be fancy with join
set dictionary=/usr/share/dict/words        " for spell checking
set spellfile=~/.dotfiles/vim/en.utf-8.add  " to add words
set spelllang=en_us            " yes, i do speak it
set spellsuggest=best,10       " only display the 10 best suggestions
set number                     " line numbers
set updatecount=10             " update swap files every 10 chars
set nostartofline              " don't move the cursor to the start of the
                               " line when we move vertically in the buffer
set pumheight=10               " show no more than 10 entries in completion menus
set scrolloff=5                " keep at least 5 lines of context when scrolling
set sidescrolloff=10           " keep at least 10 characters of context when scrolling
set sidescroll=1               " scroll horizontally by 1
set incsearch                  " search as I type
set ignorecase                 " ignore case when searching, ...
set smartcase                  " unless I search for uppercase
set hlsearch                   " and highlight searches
set gdefault                   " replace all occurrances on the line by default
set tabstop=4                  " 4 space tabs
set shiftwidth=4               " indentation uses 4 spaces as well e.g. >>
set expandtab                  " uses spaces, not tabs
set softtabstop=2              " use 2 spaces when tabbing because, ...
set smarttab                   " use softtabstop when tabbing when not at start of line
set textwidth=79               " break long lines after 80 chars
set backupdir=$HOME/.vimdata/vimbackup/ " save backups in alternate location
set directory=$HOME/.vimdata/vimswap/   " save swap files here
set viewdir=$HOME/.vimdata/vimviews/    " save views here
set wildmenu                   " commandline completion is nice

" Use a bar-shaped cursor for insert mode, even through tmux.
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

if exists('&undofile')
    set undofile         " Save undo history to a file for persistence
    set undodir=$HOME/.vimdata/vimundo/ " Save undo data here
endif

set fillchars=        " reset fillchars
set fillchars+=fold:- " fill foldtext with dashes
set fillchars+=diff:⣿ " indicate deleted lines in diffs with ⣿
set fillchars+=vert:│ " indicate vertical splits with │

set listchars=            " reset listchars
set listchars+=tab:▸\     " display tabs
set listchars+=eol:¬      " display eol
set listchars+=extends:❯  " hint that theres more to the right, ...
set listchars+=precedes:❮ " hint that theres more to the left, ...

" only show trailing whitespace when not in insert mode
augroup trailing
    au!
    au InsertEnter * :set listchars-=trail:⌴
    au InsertLeave * :set listchars+=trail:⌴
augroup END

set shortmess=   " reset shortmess
set shortmess+=f " '(3 of 5)' instead of '(file 3 of 5)'
set shortmess+=i " '[noeol] instead of '[Incompelte last line]'
set shortmess+=l " '999L, 888C' instead of '999 lines, 888 characters'
set shortmess+=m " '[+]' instead of '[Modified]'
set shortmess+=n " '[New]' instead of '[New File]'
set shortmess+=r " '[RO]' instead of '[readonly]'
set shortmess+=w " '[w]' instead of 'written' '[a]' instead of 'appended'
set shortmess+=x " '[dos]' instead of '[dos format]', '[unix]' instead of
                 "  '[unix format]', '[mac]' instead of '[mac format]'
set shortmess+=o " overwrite message for writing a file with subsequent message
                 "  for reading a file (useful for ":wn" or when 'autowrite' on)
set shortmess+=O " message for reading a file overwrites any previous message.
                 "  Also for quickfix message (e.g., ":cn").
set shortmess+=t " truncate file message at the start if it is too long to fit
                 "  on the command-line, "<" will appear in the left most column.
                 "  Ignored in Ex mode.
set shortmess+=T " truncate other messages in the middle if they are too long to
                 "  fit on the command line.  "..." will appear  in the middle.
                 "  Ignored in Ex mode.
set shortmess+=I " don't give the intro message when starting Vim |:intro|.

set iskeyword-=: " treat : as a keyword
set iskeyword-=; " treat ; as a keyword
set iskeyword-=, " treat , as a keyword
set iskeyword+=_ " treat _ as a keyword

set diffopt=        " reset diffopt
set diffopt+=filler " add filler to diff to keep text synchronized
set diffopt+=iwhite " ignore white space in diff

set completeopt=         " reset completeopt
set completeopt+=longest " insert the longest match
set completeopt+=menu    " show the menu when there are matches
set completeopt+=menuone " even if there's only one
set completeopt+=preview

set viminfo+=n~/.vimdata/viminfo " move the viminfo file into ~/.vimdata

set switchbuf=                   " reset switchbuf
set switchbuf+=useopen " switch to a window with the file on open instead of opening it in a second window
set switchbuf+=usetab  " switch to another tab with the file open instead of opening it in a second window

set virtualedit=        " reset virtualedit
set virtualedit+=block  " can move past the end of the line in visual block mode
set virtualedit+=insert " can move past the end of the line in insert mode

set formatoptions=   " reset formatoptions
set formatoptions+=c " autowrap comments using textwidth
set formatoptions+=r " insert comment after hitting enter in a comment
set formatoptions+=o " insert comment after 'o' or 'O' in normal mode
set formatoptions+=q " format comments with gq
set formatoptions+=n " recognize numbered lists
set formatoptions+=1 " don't break a line after a 1 letter word

set wildmode=              " reset wildmode
set wildmode+=longest:full " complete til longest string, use wildmenu
set wildmode+=list:full    " when more than one matchm list all and complete the
                                 " first
set wildignore+=.git,.hg,.svn,CVS              " ignore vcs directories
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg " ignore images
set wildignore+=*.o,*.so,*.out                 " ignore compiled objects
set wildignore+=*.sw?                          " ignore swap files
set wildignore+=*.DS_Store                     " ignore mac crap
set wildignore+=*.pyc,*.pyo                    " ignore pyton compiled objects

function! GitStatusLine()
    let git_info = fugitive#head(8)
    if git_info != ''
        return "Git(".git_info.")"
    else
        return ''
    endif
endfunction

set statusline=                            " clear statusline
set statusline+=%F\                        " full filename
set statusline+=%m%r%w                     " flags
set statusline+=%y\                        " filetype
set statusline+=%=                         " seperator
set statusline+=%{GitStatusLine()}\  " Git branch info
set statusline+=c:%c\                      " column
set statusline+=l:%l/%L\                   " line
set statusline+=(%p%%)                     " percentage thru file

set whichwrap+=<,> " <Left> and <Right> can move to the previous/next line

" Lets try this again. Center view when searching
nnoremap n nzz
nnoremap N Nzz

" Same for the jumplist
nnoremap <C-o> <C-o>zz
nnoremap <C-i> <C-i>zz   " FIXME - this doesnt work?

" j and k will go one line, even if they're wrapped
nnoremap j gj
nnoremap k gk

" when using marks, all by default mark columns as well
nnoremap ' `

" Sometimes I don't release shift fast enough, so let's be forgiving.
command! -bang E e<bang>
command! -bang Q q<bang>
command! -bang W w<bang>
command! -bang QA qa<bang>
command! -bang Qa qa<bang>
command! -bang Wa wa<bang>
command! -bang WA wa<bang>
command! -bang Wq wq<bang>
command! -bang WQ wq<bang>

" Setup my colorscheme, ...
colorscheme distinguished

" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" Leaders
let mapleader = " "     " this may change soon, I keep wanting to have the
                        " default behavior work for ,.
let localleader = '\\'

" Simple map to disable highlighting
nnoremap // :nohl<cr>

" Easier navigation between open windows
nnoremap <C-k> <C-W>k
nnoremap <C-j> <C-W>j
nnoremap <C-h> <C-W>h
nnoremap <C-l> <C-W>l

" Simple splits, inspired by my tmux configuration
nnoremap _ :sp<cr>
nnoremap \| :vsp<cr>

" Reselect visually selected text after indenting
vnoremap > >gv
vnoremap < <gv

" make Y consistant with C and D. Yank to end of line
noremap Y y$

" Easily modify ~/.{g,}vimrc
nnoremap <leader>ev :e $MYVIMRC<CR>
nnoremap <leader>egv :e$MYGVIMRC<CR>

" Use sane regexes
" nnoremap / /\v
" vnoremap / /\v

" Tab between surrounding brackets
nnoremap <tab> %
vnoremap <tab> %

" Strip whitespace
nnoremap <leader>W :RemoveTrailingWhiteSpace<cr>

" sudo write-file in case you opened a file you dont have privileges to write
cmap w!! w !sudo tee % >/dev/null<cr>

nnoremap <c-c> :close<cr>

" custom text objects around and in character pairs
let pairs = { ':' : ':',
            \ '.' : '.',
            \ ',' : ',',
            \ '/' : '/',
            \ '<bar>' : '<bar>' }
for [start, end] in items(pairs)
    exe "nnoremap ci".start." T".start."ct".end
    exe "nnoremap ca".start." F".start."cf".end
    exe "nnoremap yi".start." T".start."yt".end
    exe "nnoremap ya".start." F".start."yf".end
    exe "nnoremap vi".start." T".start."vt".end
    exe "nnoremap va".start." F".start."vf".end
    exe "nnoremap di".start." T".start."dt".end
    exe "nnoremap da".start." F".start."df".end
endfor

" Remove F1 Help
inoremap <F1> <nop>
nnoremap <F1> <nop>
vnoremap <F1> <nop>

" Show git diff when commiting  FIXME this conflicts with fugitive
" autocmd FileType gitcommit DiffGitCached | wincmd p

autocmd FileType Help setlocal nonumber nolist
autocmd FileType man setlocal nonumber nolist
autocmd FileType gitcommit setlocal spell
autocmd FileType markdown setlocal spell tabstop=2 shiftwidth=2 softtabstop=2
autocmd FileType perl setlocal iskeyword+=$,%,@ tabstop=4 shiftwidth=4 softtabstop=4
autocmd FileType python setlocal tabstop=4 shiftwidth=4 softtabstop=4 expandtab
autocmd FileType ruby setlocal tabstop=2 shiftwidth=2 softtabstop=2

" Easy window resizing
noremap <up> <C-W>+
noremap <down> <C-W>-
nnoremap <left> <C-W><
nnoremap <right> <C-W>>

" . returns to starting place
nnoremap . .`[

" Omni-complete with shift-tab
inoremap <s-tab> <c-x><c-o>
inoremap <S-TAB> <c-x><c-o>

" Simple way to find out where the hell my cursor is
function! WhereAmI()
    set invcursorline
    set invcursorcolumn
endfunction

nnoremap <leader>? :call WhereAmI()<cr>

function! WhatGroup()
    if !exists("*synstack")
        return
    endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc
command! WhatGroup :call WhatGroup()

function! RemoveTrailingWhiteSpace()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfun

command! RemoveTrailingWhiteSpace :call RemoveTrailingWhiteSpace()

" Ctrl+P
let g:ctrlp_extensions = ['tag', 'buffertag', 'quickfix', 'dir', 'undo', 'line'. 'changes']
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_cache_dir = $HOME.'/.vimdata/ctrlp'
let g:ctrlp_map = '<leader>p'
let g:ctrlp_mruf_relative = 1
let g:ctrlp_reuse_window = 'netrw\|help'
let g:ctrlp_dotfiles              = 0
nnoremap <leader>b :CtrlPBuffer<CR>
nnoremap <leader>t :CtrlPTag<CR>
nnoremap <leader>m :CtrlPMRU<CR>
"  <C-t> → will open the finding match in a tab
"  <C-v> → will open the finding match in a vertical split
"  <C-h> → will open the finding match in a horizontal split

" Tabularize
vnoremap <silent> <Leader>a=> :Tabularize /=><CR>
vnoremap <silent> <Leader>a= :Tabularize /=<CR>
vnoremap <silent> <Leader>a, :Tabularize /,\zs<CR>
nnoremap <silent> <Leader>a, :Tabularize /,\zs<CR>
vnoremap <silent> <Leader>a: :Tabularize /:\zs<CR>
nnoremap <silent> <Leader>a: :Tabularize /:\zs<CR>

" Easytags
set tags=./tags;                  " name of the tags files which is relative to the project
let g:easytags_dynamic_files = 1  " write first existing seen tag file by Vim (refer to echo &tags)
let g:easytags_resolve_links = 1  " resolve symbolic links with pathnames
let g:easytags_include_members = 1
let g:easytags_file = '~/.vimdata/vimtags'

" Fugitive
" :Gstatus → git status → Ctrl→n → go to the next file → Ctrl→p → go to the preview file
" :Gwrite → git add
" :Gcommit → git commit (press wq for send)
" :Gblame → git blame
" :Gmove → git mv
" :Gremove → git rm
" :Glog → git log
" :Gdiff → split the window and display the changes
" :Ggrep → does a grep in the tree
" :Gbrowse → opens the actual file in the browser (normally its on github)
" :Git → after this you can perform every other normal git command you want
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gw :Gwrite<CR>
nnoremap <leader>ga :Gadd<CR>
nnoremap <leader>gb :Gblame<CR>
nnoremap <leader>gl :Glog<CR>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gm :Gmove<CR>
nnoremap <leader>gr :Gremove<CR>
nnoremap <leader>gp :! git push<CR>

" Tagbar
let g:tagbar_compact = 1 " don't show the help in the tagbar

" slime
" :SlimeConfig - configure which tmux pane to send text
" :SlimeSend - send text, can use a range, or marks including the marks used to
" delimit visual mode selection
let g:slime_target = "tmux"
let g:slime_no_mappings = 1

" NERDCommenter
let g:NERDCreateDefaultMappings = 0
let g:NERDSpaceDelims = 1
vmap <leader>cc <plug>NERDCommenterToggle<cr>vgv
vmap <leader><leader> <plug>NERDCommenterToggle<cr>vgv
nmap <leader>cc <plug>NERDCommenterToggle
nmap <leader><leader> <plug>NERDCommenterToggle
nmap <leader>c$ <plug>NERDCommenterToEOL

" NetRW
let g:netrw_liststyle = 3
let g:netrw_menu = 0
let g:netrw_list_hide="^\.git/$,^\.svn/$,^CVS/$,^CVSROOT/$,\.py[co]$,\.swp$,\\~$,^#"

" Supertab
let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabClosePreviewOnPopupClose = 1

" Load abbreviations
source ~/.vim/abbrev
