" Load Plugins ------------------------------------------------------------- {{{
" Initialize vundle -------------------------------------------------------- {{{
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
" }}}
Bundle 'gmarik/vundle'
Bundle 'AfterColors.vim'
Bundle 'AutoComplPop'
Bundle 'Lokaltog/vim-distinguished'
Bundle 'OnSyntaxChange'
Bundle 'ajf/puppet-vim'
Bundle 'ervandew/supertab.git'
Bundle 'godlygeek/tabular'
Bundle 'jpalardy/vim-slime'
Bundle 'kana/vim-textobj-indent.git'
Bundle 'kana/vim-textobj-user.git'
Bundle 'kien/ctrlp.vim'
Bundle 'klen/python-mode'
Bundle 'kshenoy/vim-signature'
Bundle 'majutsushi/tagbar'
Bundle 'mkomitee/snipmate.vim'
Bundle 'nelstrom/vim-markdown-folding'
Bundle 'python_match.vim'
Bundle 'scrooloose/nerdcommenter'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/snipmate-snippets'
Bundle 'sjl/gundo.vim'
Bundle 'tmatilai/gitolite.vim'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-git'
Bundle 'tpope/vim-markdown'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-surround'
" Turn on all the features ... --------------------------------------------- {{{
syntax on
filetype plugin indent on
runtime macros/matchit.vim
" }}}
" }}}
" Preferences -------------------------------------------------------------- {{{
set encoding=utf-8             " Prefer utf-8 character encoding
set autoindent                 " Try to line up code intelligently
set hidden                     " Allow for hidden buffers
set backspace=indent,eol,start " Nothing is too sacred to be <BS>
set laststatus=2               " Every window always gets a statusline
set history=10000              " Keep a lot of ex commands in history
set list                       " show invisibles
set showbreak=↪                " indicate a line is the continuation of a
                               "  wrapped line
set showmatch                  " show matching parenthesis
set splitbelow                 " new horizontal splits to below
set splitright                 " new vertical splits goto the right
set autoread                   " reread files which changes on disk if they
                               "  havnt changed in the buffer
set foldlevelstart=0           " Start with all folds open
set nojoinspaces               " Don't be fancy with join
set dictionary=/usr/share/dict/words        " for spell checking
set spellfile=~/.dotfiles/vim/en.utf-8.add  " to add words
set spelllang=en_us            " yes, i do speak it
set spellsuggest=best,10       " only display the 10 best suggestions
set number                     " line numbers
set updatecount=10             " update swap files every 10 chars
set nostartofline              " don't move the cursor to the start of the
                               " line when we move vertically in the buffer
set pumheight=10               " show no more than 10 entries in completion menus
set scrolloff=5                " keep at least 5 lines of context when scrolling
set sidescrolloff=10           " keep at least 10 characters of context when scrolling
set sidescroll=1               " scroll horizontally by 1
set incsearch                  " search as I type
set ignorecase                 " ignore case when searching, ...
set smartcase                  " unless I search for uppercase
set hlsearch                   " and highlight searches
set gdefault                   " replace all occurrances on the line by default
set backupdir=$HOME/.vimdata/vimbackup/ " save backups in alternate location
set directory=$HOME/.vimdata/vimswap/   " save swap files here
set viewdir=$HOME/.vimdata/vimviews/    " save views here
set wildmenu                   " commandline completion is nice
set expandtab                  " by default, use spaces & no tabs
set shiftwidth=4               " shift width (>> & autoindent)
set smarttab                   " shiftwidth at start of line, tabstop elsewhere
set softtabstop=4              " 1 tab = 4 spaces
set tabstop=4                  " 1 tab = 4 spaces
set textwidth=80               " wrap at 80 columns
set nospell                    " spell checking is off
set tags=./tags;               " name of the tags files which is relative to the project
set notimeout
set ttimeout
set ttimeoutlen=10
" undofile ----------------------------------------------------------------- {{{
if exists('&undofile')
    set undofile         " Save undo history to a file for persistence
    set undodir=$HOME/.vimdata/vimundo/ " Save undo data here
endif
" }}}
" fillchars ---------------------------------------------------------------- {{{
set fillchars=        " reset fillchars
set fillchars+=fold:- " fill foldtext with dashes
set fillchars+=diff:⣿ " indicate deleted lines in diffs with ⣿
set fillchars+=vert:│ " indicate vertical splits with │
" }}}
" listchars ---------------------------------------------------------------- {{{
set listchars=            " reset listchars
set listchars+=tab:▸\     " display tabs
set listchars+=extends:❯  " hint that theres more to the right, ...
set listchars+=precedes:❮ " hint that theres more to the left, ...
" }}}
" shortmess ---------------------------------------------------------------- {{{
set shortmess=   " reset shortmess
set shortmess+=f " '(3 of 5)' instead of '(file 3 of 5)'
set shortmess+=i " '[noeol] instead of '[Incompelte last line]'
set shortmess+=l " '999L, 888C' instead of '999 lines, 888 characters'
set shortmess+=m " '[+]' instead of '[Modified]'
set shortmess+=n " '[New]' instead of '[New File]'
set shortmess+=r " '[RO]' instead of '[readonly]'
set shortmess+=w " '[w]' instead of 'written' '[a]' instead of 'appended'
set shortmess+=x " '[dos]' instead of '[dos format]', '[unix]' instead of
                 "  '[unix format]', '[mac]' instead of '[mac format]'
set shortmess+=o " overwrite message for writing a file with subsequent message
                 "  for reading a file (useful for ":wn" or when 'autowrite' on)
set shortmess+=O " message for reading a file overwrites any previous message.
                 "  Also for quickfix message (e.g., ":cn").
set shortmess+=t " truncate file message at the start if it is too long to fit
                 "  on the command-line, "<" will appear in the left most column.
                 "  Ignored in Ex mode.
set shortmess+=T " truncate other messages in the middle if they are too long to
                 "  fit on the command line.  "..." will appear  in the middle.
                 "  Ignored in Ex mode.
set shortmess+=I " don't give the intro message when starting Vim |:intro|.
" }}}
" iskeyword ---------------------------------------------------------------- {{{
set iskeyword-=: " treat : as a keyword
set iskeyword-=; " treat ; as a keyword
set iskeyword-=, " treat , as a keyword
set iskeyword+=_ " treat _ as a keyword
" }}}
" diffopt ------------------------------------------------------------------ {{{
set diffopt=        " reset diffopt
set diffopt+=filler " add filler to diff to keep text synchronized
set diffopt+=iwhite " ignore white space in diff
" }}}
" completeopt -------------------------------------------------------------- {{{
set completeopt=         " reset completeopt
set completeopt+=longest " insert the longest match
set completeopt+=menuone " show the menu when there are matches
set completeopt+=preview
"}}}
" viminfo ------------------------------------------------------------------ {{{
set viminfo+=n~/.vimdata/viminfo " move the viminfo file into ~/.vimdata
" }}}
" switchbuf ---------------------------------------------------------------- {{{
set switchbuf=                   " reset switchbuf
set switchbuf+=useopen " switch to a window with the file on open instead of opening it in a second window
set switchbuf+=usetab  " switch to another tab with the file open instead of opening it in a second window
" }}}
" virtualedit -------------------------------------------------------------- {{{
set virtualedit=        " reset virtualedit
set virtualedit+=block  " can move past the end of the line in visual block mode
set virtualedit+=insert " can move past the end of the line in insert mode
" }}}
" formatoptions ------------------------------------------------------------ {{{
set formatoptions=   " reset formatoptions
set formatoptions+=c " autowrap comments using textwidth
set formatoptions+=r " insert comment after hitting enter in a comment
set formatoptions+=o " insert comment after 'o' or 'O' in normal mode
set formatoptions+=q " format comments with gq
set formatoptions+=n " recognize numbered lists
set formatoptions+=1 " don't break a line after a 1 letter word
" }}}
" wildmode ----------------------------------------------------------------- {{{
set wildmode=              " reset wildmode
set wildmode+=longest:full " complete til longest string, use wildmenu
set wildmode+=list:full    " when more than one matchm list all and complete the
                                 " first
" }}}
" wildignore --------------------------------------------------------------- {{{
set wildignore+=.git,.hg,.svn,CVS              " ignore vcs directories
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg " ignore images
set wildignore+=*.o,*.so,*.out                 " ignore compiled objects
set wildignore+=*.sw?                          " ignore swap files
set wildignore+=*.DS_Store                     " ignore mac crap
set wildignore+=*.pyc,*.pyo                    " ignore pyton compiled objects
" }}}
" statusline --------------------------------------------------------------- {{{
set statusline=                            " clear statusline
set statusline+=%F\                        " full filename
set statusline+=%m%r%w                     " flags
set statusline+=%y\                        " filetype
set statusline+=%=                         " seperator
set statusline+=%{GitStatusLine()}\  " Git branch info
set statusline+=c:%c\                      " column
set statusline+=l:%l/%L\                   " line
set statusline+=(%p%%)                     " percentage thru file
" }}}
" whichwrap ---------------------------------------------------------------- {{{
set whichwrap+=<,> " <Left> and <Right> can move to the previous/next line
" }}}
" }}}
" Leaders ------------------------------------------------------------------ {{{
let mapleader = " "     " this may change soon, I keep wanting to have the
                        " default behavior work for ,.
let localleader = '\\'
" }}}
" Custom functions --------------------------------------------------------- {{{
function! GitStatusLine() " ------------------------------------------------ {{{
    let git_info = fugitive#head(8)
    if git_info != ''
        return "Git(".git_info.")"
    else
        return ''
    endif
endfunction
"}}}
function! WhatGroup() " ---------------------------------------------------- {{{
    if !exists("*synstack")
        return
    endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc " }}}
function! RemoveTrailingWhiteSpace() " ------------------------------------- {{{
    " Allow a buffer local variable twsok (trailing whitespace ok) to permit
    " trailing whitspace -- sometimes I need to do this if im editing someone elses
    " code and don't want to own the entire file in vcs. Enable it with
    " let twsok=1, disable it with unlet twsok
    if !exists("b:twsok")
        " Preparation: save last search, and cursor position.
        let _s=@/
        let l = line(".")
        let c = col(".")
        " Do the business:
        %s/\s\+$//e
        " Clean up: restore previous search history, and cursor position
        let @/=_s
        call cursor(l, c)
    endif
endfun " }}}
function! RestoreCursorPosition() " ---------------------------------------- {{{
    " Restore cursor position to the last time you were in the file, this uses marks
    " so it's dependent on viminfo
  if line("'\"") <= line("$")
    normal! g`"
    call FocusFold()
    return 1
  endif
endfunction " }}}
function! Pulse(n) " ------------------------------------------------------- {{{
    let current_window = winnr()
    windo set nocursorline
    execute current_window . 'wincmd w'
    setlocal cursorline

    redir => old_hi
        silent execute 'hi CursorLine'
    redir END
    let old_hi = split(old_hi, '\n')[0]
    let old_hi = substitute(old_hi, 'xxx', '', '')

    let steps = a:n
    let width = 1
    let start = width
    let end = steps * width
    let color = 233

    for i in range(start, end, width)
        execute "hi CursorLine ctermbg=" . (color + i)
        redraw
        sleep 6m
    endfor
    for i in range(end, start, -1 * width)
        execute "hi CursorLine ctermbg=" . (color + i)
        redraw
        sleep 6m
    endfor

    execute 'hi ' . old_hi
    setlocal nocursorline
endfunction " }}}
function! FocusFold() " -------------------------------------------------- {{{
    let c = virtcol(".")
    let l = line(".")
    normal! zM
    normal! zv
    normal! zz
    call cursor(l, c)
    call Pulse(9)
    return 1
endfunction " }}}
" }}}
" Custom maps -------------------------------------------------------------- {{{
" Swap default ':', '/' and '?' with cmdline-window equivalent. ------------ {{{
nnoremap : q:i
xnoremap : q:i
nnoremap / q/i
nnoremap ? q?i
nnoremap q: :
xnoremap q: :
nnoremap q/ /
nnoremap q? ?
" Have <esc> leave cmdline-window
autocmd CmdwinEnter * nnoremap <buffer> <esc> :q<cr>
" }}}
" Center view and focus when searching ------------------------------------- {{{
nnoremap <silent> n nzz:call Pulse(5)<cr>
nnoremap <silent> N Nzz:call Pulse(5)<cr>
" }}}
" Center view after traversing the jumplist -------------------------------- {{{
nnoremap <silent> <C-o> <C-o>zz
nnoremap <silent> <C-i> <C-i>zz
" }}}
" j and k will go one line, even if they're wrapped ------------------------ {{{
nnoremap <silent> j gj
nnoremap <silent> k gk
" }}}
" When using marks, all by default mark columns as well -------------------- {{{
nnoremap <silent> ' `
" }}}
" Simple map to disable highlighting --------------------------------------- {{{
nnoremap <silent> // :nohl<cr>
" }}}
" Easier navigation between open windows ----------------------------------- {{{
nnoremap <silent> <C-k> <C-W>k
nnoremap <silent> <C-j> <C-W>j
nnoremap <silent> <C-h> <C-W>h
nnoremap <silent> <C-l> <C-W>l
" }}}
" Simple splits, inspired by my tmux configuration ------------------------- {{{
nnoremap <silent> _ :sp<cr>
nnoremap <silent> \| :vsp<cr>
" }}}
" Reselect visually selected text after indenting -------------------------- {{{
vnoremap <silent> > >gv
vnoremap <silent> < <gv
" }}}
" make Y consistant with C and D. Yank to end of line ---------------------- {{{
noremap <silent> Y y$
" }}}
" Easily modify ~/.{g,}vimrc ----------------------------------------------- {{{
nnoremap <silent> <leader>ev :e $MYVIMRC<CR>
nnoremap <silent> <leader>egv :e$MYGVIMRC<CR>
" }}}
" Strip whitespace --------------------------------------------------------- {{{
nnoremap <silent> <leader>W :RemoveTrailingWhiteSpace<cr>
" }}}
" sudo write-file in case you're in a file you dont have privileges to write {{{
cmap <silent> w!! w !sudo tee % >/dev/null<cr>
" }}}
" jj = Esc ----------------------------------------------------------------- {{{
inoremap <silent> jj <Esc>
" }}}
" Remove F1 Help ----------------------------------------------------------- {{{
inoremap <F1> <nop>
nnoremap <F1> <nop>
vnoremap <F1> <nop>
" }}}
" Easy window resizing ----------------------------------------------------- {{{
noremap <silent> <up> <C-W>+
noremap <silent> <down> <C-W>-
nnoremap <silent> <left> <C-W><
nnoremap <silent> <right> <C-W>>
" }}}
" . returns to starting place after repeat --------------------------------- {{{
nnoremap <silent> . .`[
" }}}
" Simple way to find out where the hell my cursor is ----------------------- {{{
nnoremap <silent> <leader>? :call Pulse(9)<cr>
" }}}
" Custom text objects around and in character pairs ------------------------ {{{
let pairs = { ':' : ':',
            \ '.' : '.',
            \ ',' : ',',
            \ '/' : '/',
            \ '<bar>' : '<bar>' }
for [start, end] in items(pairs)
    exe "nnoremap <silent> ci".start." T".start."ct".end
    exe "nnoremap <silent> ca".start." F".start."cf".end
    exe "nnoremap <silent> yi".start." T".start."yt".end
    exe "nnoremap <silent> ya".start." F".start."yf".end
    exe "nnoremap <silent> vi".start." T".start."vt".end
    exe "nnoremap <silent> va".start." F".start."vf".end
    exe "nnoremap <silent> di".start." T".start."dt".end
    exe "nnoremap <silent> da".start." F".start."df".end
endfor
" }}}
" Focus Fold --------------------------------------------------------------- {{{
nnoremap <silent> zf :call FocusFold()<cr>
" }}}
" Simple visual sorting ---------------------------------------------------- {{{
vnoremap <silent> <leader>s :sort<cr>gv
" }}}
" }}}
" Custom commands ---------------------------------------------------------- {{{
" Allow common typos in commands ------------------------------------------- {{{
command! -bang E e<bang>
command! -bang Q q<bang>
command! -bang W w<bang>
command! -bang QA qa<bang>
command! -bang Qa qa<bang>
command! -bang Wa wa<bang>
command! -bang WA wa<bang>
command! -bang Wq wq<bang>
command! -bang WQ wq<bang>
" }}}
command! WhatGroup :call WhatGroup()
command! RemoveTrailingWhiteSpace :call RemoveTrailingWhiteSpace()
command! SoftTabs :call SoftTabs()
command! -nargs=0 Pulse call s:Pulse(9)
" }}}
" Colorscheme -------------------------------------------------------------- {{{
colorscheme distinguished
" }}}
" Plugin Configurations ---------------------------------------------------- {{{
" Ctrl+P ------------------------------------------------------------------- {{{
let g:ctrlp_extensions = ['tag', 'buffertag', 'quickfix', 'dir', 'undo', 'line'. 'changes']

let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_cache_dir = $HOME.'/.vimdata/ctrlp'
let g:ctrlp_map = '<leader>p'
let g:ctrlp_mruf_relative = 1
let g:ctrlp_reuse_window = 'netrw\|help'
let g:ctrlp_dotfiles              = 0
nnoremap <silent> <leader>b :CtrlPBuffer<CR>
nnoremap <silent> <leader>m :CtrlPMRU<CR>
"  <C-t> → will open the finding match in a tab
"  <C-v> → will open the finding match in a vertical split
"  <C-h> → will open the finding match in a horizontal split
" }}}
" AutoComplPop ------------------------------------------------------------- {{{
let g:acp_behaviorKeywordLength = 5
" No completion in comments
call OnSyntaxChange#Install('Comment', '^Comment$', 0, 'i')
autocmd User SyntaxCommentEnterI silent! AcpLock
autocmd User SyntaxCommentLeaveI silent! AcpUnlock
" No completion in the command window
autocmd CmdwinEnter * AcpLock
autocmd CmdwinLeave * AcpUnlock
" }}}
" Python-Mode -------------------------------------------------------------- {{{
let g:pymode_syntax = 1
let g:pymode_doc = 1
let g:pymode_doc_key = '<localleader>?'
let g:pydoc = 'pydoc'
let g:pymode_run = 0
let g:pymode_lint = 0
let g:pymode_breakpoint = 0
let g:pymode_folding = 1
let g:pymode_motion = 1
let g:pymode_utils_whitespaces = 0
let g:pymode_virtualenv = 0
let g:pymode_indent = 0
let g:pymode_rope = 0
" }}}
" Tabularize --------------------------------------------------------------- {{{
vnoremap <silent> <Leader>a=> :Tabularize /=><CR>
vnoremap <silent> <Leader>a= :Tabularize /=<CR>
vnoremap <silent> <Leader>a, :Tabularize /,\zs<CR>
nnoremap <silent> <Leader>a, :Tabularize /,\zs<CR>
vnoremap <silent> <Leader>a: :Tabularize /:\zs<CR>
nnoremap <silent> <Leader>a: :Tabularize /:\zs<CR>
" }}}
" Easytags ----------------------------------------------------------------- {{{
let g:easytags_dynamic_files = 1  " write first existing seen tag file by Vim (refer to echo &tags)
let g:easytags_resolve_links = 1  " resolve symbolic links with pathnames
let g:easytags_include_members = 1
let g:easytags_by_filetype = '~/.vimdata/tags'
" }}}
" Fugitive ----------------------------------------------------------------- {{{
" :Gstatus → git status → Ctrl→n → go to the next file → Ctrl→p → go to the preview file
" :Gwrite → git add
" :Gcommit → git commit (press wq for send)
" :Gblame → git blame
" :Gmove → git mv
" :Gremove → git rm
" :Glog → git log
" :Gdiff → split the window and display the changes
" :Ggrep → does a grep in the tree
" :Gbrowse → opens the actual file in the browser (normally its on github)
" :Git → after this you can perform every other normal git command you want
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gw :Gwrite<CR>
nnoremap <silent> <leader>ga :Gadd<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>gl :Glog<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gm :Gmove<CR>
nnoremap <silent> <leader>gr :Gremove<CR>
nnoremap <silent> <leader>gp :! git push<CR>
nnoremap <silent> <leader>dg :diffget<CR>
nnoremap <silent> <leader>dp :diffput<CR>
" }}}
" Tagbar ------------------------------------------------------------------- {{{
let g:tagbar_compact = 1 " don't show the help in the tagbar
" }}}
" slime -------------------------------------------------------------------- {{{
" :SlimeConfig - configure which tmux pane to send text
" :SlimeSend - send text, can use a range, or marks including the marks used to
" delimit visual mode selection
" python => ipython
" perl   => Devel::REPL's re.pl
" ruby   => irb
let g:slime_no_mappings = 0
let g:slime_target = "tmux"
let g:slime_paste_file = $HOME.'/.vimdata/slime'
au FileType python let g:slime_python_ipython = 1
" <leader>s - send region or motion
" }}}
" NERDCommenter ------------------------------------------------------------ {{{
let g:NERDCreateDefaultMappings = 0
let g:NERDSpaceDelims = 1
vmap <silent> <leader>cc <plug>NERDCommenterToggle<cr>vgv
vmap <silent> <leader><leader> <plug>NERDCommenterToggle<cr>vgv
nmap <silent> <leader>cc <plug>NERDCommenterToggle
nmap <silent> <leader><leader> <plug>NERDCommenterToggle
nmap <silent> <leader>c$ <plug>NERDCommenterToEOL
" }}}
" NERDTree ----------------------------------------------------------------- {{{
nnoremap <silent> <leader>d :NERDTreeToggle<CR>
nnoremap <silent> <leader>dd :NERDTreeToggle<CR>
" }}}
" Supertab ----------------------------------------------------------------- {{{
let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabClosePreviewOnPopupClose = 1
let g:SuperTabLongestEnhanced = 1
let g:SuperTabCrMapping = 0
let g:SuperTabLongestHighlight = 1
" }}}
" Gundo -------------------------------------------------------------------- {{{
let g:gundo_debug = 1
let g:gundo_preview_bottom = 1
let g:gundo_tree_statusline = "Gundo"
let g:gundo_preview_statusline = "Gundo Preview"
nnoremap <silent> <leader>g :GundoToggle<cr>
" }}}
" }}}
" Filetype detection ------------------------------------------------------- {{{
au BufNewFile,BufRead gitconfig setf gitconfig
au BufNewFile,BufRead /private/tmp/crontab.* setl backupcopy=yes
" }}}
" Filetype configurations -------------------------------------------------- {{{
" make --------------------------------------------------------------------- {{{
au FileType make au BufWritePre <buffer> RemoveTrailingWhiteSpace
au FileType make setl noexpandtab
au FileType make setl nosmarttab
au FileType make setl softtabstop=0
" }}}
" man ---------------------------------------------------------------------- {{{
au FileType man setl nolist
au FileType man setl nonumber
" }}}
" markdown ----------------------------------------------------------------- {{{
au FileType markdown au BufWritePre <buffer> RemoveTrailingWhiteSpace
au FileType markdown setl shiftwidth=2
au FileType markdown setl softtabstop=2
au FileType markdown setl spell
au FileType markdown setl tabstop=2
au Filetype markdown nnoremap <silent> <buffer> <leader>1 yypVr=:redraw<cr>
au Filetype markdown nnoremap <silent> <buffer> <leader>2 yypVr-:redraw<cr>
au Filetype markdown nnoremap <silent> <buffer> <leader>3 mzI###<space><ESC>`zlll <ESC>
au BufNewFile,BufRead $HOME/.tasks.md setl nospell
" }}}
" perl --------------------------------------------------------------------- {{{
au FileType perl au BufWritePre <buffer> RemoveTrailingWhiteSpace
au FileType perl setl iskeyword+=$,%,@
" }}}
" puppet ------------------------------------------------------------------- {{{
au FileType puppet au BufWritePre <buffer> RemoveTrailingWhiteSpace
" }}}
" python ------------------------------------------------------------------- {{{
au FileType python au BufWritePre <buffer> RemoveTrailingWhiteSpace
au FileType python setl textwidth=79
" }}}
" rst ---------------------------------------------------------------------- {{{
au Filetype rst nnoremap <silent> <buffer> <leader>1 yypVr=:redraw<cr>
au Filetype rst nnoremap <silent> <buffer> <leader>2 yypVr-:redraw<cr>
au Filetype rst nnoremap <silent> <buffer> <leader>3 yypVr~:redraw<cr>
au Filetype rst nnoremap <silent> <buffer> <leader>4 yypVr`:redraw<cr>
" }}}
" ruby --------------------------------------------------------------------- {{{
au FileType ruby au BufWritePre <buffer> RemoveTrailingWhiteSpace
" }}}
" shell -------------------------------------------------------------------- {{{
au FileType sh,zsh au BufWritePre <buffer> RemoveTrailingWhiteSpace
" }}}
" vim ---------------------------------------------------------------------- {{{
au FileType vim au BufWritePre <buffer> RemoveTrailingWhiteSpace
au FileType vim setl foldmethod=marker
au FileType help setl nolist
au FileType help setl nonumber
au BufWinEnter *.txt if &ft == 'help' | wincmd L | endif
" }}}
" }}}
" Folding ------------------------------------------------------------------ {{{
function! MyFoldText() " --------------------------------------------------- {{{
    let line = getline(v:foldstart)

    let nucolwidth = &fdc + &number * &numberwidth
    let windowwidth = winwidth(0) - nucolwidth - 3
    let foldedlinecount = v:foldend - v:foldstart

    " expand tabs into spaces
    let onetab = strpart('          ', 0, &tabstop)
    let line = substitute(line, '\t', onetab, 'g')

    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
    let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
    return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . '…' . ' '
endfunction " }}}
function! AddFoldMark() " -------------------------------------------------- {{{
    let _s=@/
    let c0 = virtcol(".")
    let l0 = line(".")
    .,.s/\s\+$//e
    normal $
    let c1 = col(".")
    let filler = repeat("-", 80 - 5 - c1) . " {{{" " }}}
    call append(l0, filler)
    let @/=_s
    normal J
    call cursor(l0, c0)
endfunction " }}}
set foldtext=MyFoldText()
nnoremap <silent> <leader>f :call AddFoldMark()<cr>
" }}}
" Miscellaneous ------------------------------------------------------------ {{{
" Prepare our vim cache directories ---------------------------------------- {{{
silent execute '!mkdir -p $HOME/.vimdata/vimbackup'
silent execute '!mkdir -p $HOME/.vimdata/vimswap'
silent execute '!mkdir -p $HOME/.vimdata/vimviews'
silent execute '!mkdir -p $HOME/.vimdata/vimundo'
silent execute '!mkdir -p $HOME/.vimdata/ctrlp'
silent execute '!mkdir -p $HOME/.vimdata/tags'
" }}}
" Use a bar-shaped cursor for insert mode, even through tmux. -------------- {{{
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif
" }}}
" Toggle listchars as we enter and exit insert mode ------------------------ {{{
augroup trailing
    au!
    au InsertEnter * :set listchars-=trail:⌴
    au InsertLeave * :set listchars+=trail:⌴
augroup END
" }}}
" Highlight VCS conflict markers ------------------------------------------- {{{
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'
" }}}
" Restore cursor position -------------------------------------------------- {{{
augroup restoreCursorPosition
  autocmd!
  autocmd BufReadPost * call RestoreCursorPosition()
augroup END
" }}}
" My tasks, ... ------------------------------------------------------------ {{{
nnoremap <silent> <leader>t :e $HOME/.tasks.md<cr>
" }}}
" Load abbreviations ------------------------------------------------------- {{{
source ~/.vim/abbrev
" }}}
" }}}
" Cargo Cult! -------------------------------------------------------------- {{{
" Next/Last Text Objects https://gist.github.com/1171642 ------------------- {{{
" Motion for "next/last object".  "Last" here means "previous", not "final".
" Unfortunately the "p" motion was already taken for paragraphs.
"
" Next acts on the next object of the given type in the current line, last acts
" on the previous object of the given type in the current line.
"
" Currently only works for (, [, {, b, r, B, ', and ".
"
" Some examples (C marks cursor positions, V means visually selected):
"
" din'  -> delete in next single quotes                foo = bar('spam')
"                                                      C
"                                                      foo = bar('')
"                                                                C
"
" canb  -> change around next parens                   foo = bar('spam')
"                                                      C
"                                                      foo = bar
"                                                               C
"
" vil"  -> select inside last double quotes            print "hello ", name
"                                                                        C
"                                                      print "hello ", name
"                                                             VVVVVV

onoremap <silent> an :<c-u>call <SID>NextTextObject('a', 'f')<cr>
xnoremap <silent> an :<c-u>call <SID>NextTextObject('a', 'f')<cr>
onoremap <silent> in :<c-u>call <SID>NextTextObject('i', 'f')<cr>
xnoremap <silent> in :<c-u>call <SID>NextTextObject('i', 'f')<cr>

onoremap <silent> al :<c-u>call <SID>NextTextObject('a', 'F')<cr>
xnoremap <silent> al :<c-u>call <SID>NextTextObject('a', 'F')<cr>
onoremap <silent> il :<c-u>call <SID>NextTextObject('i', 'F')<cr>
xnoremap <silent> il :<c-u>call <SID>NextTextObject('i', 'F')<cr>
function! s:NextTextObject(motion, dir) " ------------------------------------ {{{
  let c = nr2char(getchar())

  if c ==# "b"
      let c = "("
  elseif c ==# "B"
      let c = "{"
  elseif c ==# "r"
      let c = "["
  endif

  exe "normal! ".a:dir.c."v".a:motion.c
endfunction " }}}
" }}}
" }}}
