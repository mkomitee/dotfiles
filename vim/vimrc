" Load Plugins --------------------------------------------------------------{{{
" Initialize vundle ---------------------------------------------------------{{{
set nocompatible
if has('vim_starting')
    set runtimepath+=~/.vim/bundle/neobundle.vim/
endif
call neobundle#rc(expand('~/.vim/bundle/'))
NeoBundleFetch 'Shougo/neobundle.vim'
" }}}

NeoBundle 'AfterColors.vim'
NeoBundle 'ConradIrwin/vim-comment-object'
NeoBundle 'Lokaltog/vim-distinguished'
NeoBundle 'MarcWeber/vim-addon-mw-utils'
NeoBundle 'YankRing.vim'
NeoBundle 'chriskempson/base16-vim'
NeoBundle 'duff/vim-scratch.git'
NeoBundle 'ervandew/supertab.git'
NeoBundle 'garbas/vim-snipmate'
NeoBundle 'godlygeek/tabular'
NeoBundle 'int3/vim-extradite'
NeoBundle 'jpalardy/vim-slime'
NeoBundle 'kana/vim-textobj-indent.git'
NeoBundle 'kana/vim-textobj-user.git'
NeoBundle 'kien/ctrlp.vim'
NeoBundle 'kshenoy/vim-signature'
NeoBundle 'majutsushi/tagbar'
NeoBundle 'mhinz/vim-signify'
NeoBundle 'mileszs/ack.vim.git'
NeoBundle 'mkitt/tabline.vim.git'
NeoBundle 'mkomitee/vim-gf-python'
NeoBundle 'mkomitee/vim-snippets'
NeoBundle 'nelstrom/vim-americanize'
NeoBundle 'nelstrom/vim-visual-star-search'
NeoBundle 'python_match.vim'
NeoBundle 'scrooloose/nerdcommenter'
NeoBundle 'sjl/gundo.vim'
NeoBundle 'sjl/splice.vim'
NeoBundle 'tomtom/tlib_vim'
NeoBundle 'tpope/vim-abolish'
NeoBundle 'tpope/vim-characterize'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'tpope/vim-markdown'
NeoBundle 'tpope/vim-repeat'
NeoBundle 'tpope/vim-surround'
NeoBundle 'tpope/vim-tbone'
NeoBundle 'tpope/vim-unimpaired'
NeoBundle 'tpope/vim-vividchalk'

" Turn on all the features ... ----------------------------------------------{{{
syntax on
filetype plugin indent on
runtime macros/matchit.vim
NeoBundleCheck
" }}}
" }}}
" Preferences ---------------------------------------------------------------{{{
set encoding=utf-8             " Prefer utf-8 character encoding
set autoindent                 " Try to line up code intelligently
set autoread                   " reload files if modified outside of vim & safe
set hidden                     " Allow for hidden buffers
set backspace=indent,eol,start " Nothing is too sacred to be <BS>
set laststatus=2               " Every window always gets a statusline
set history=1000               " Keep a lot of ex commands in history
set list                       " show invisibles
set showbreak=↪                " indicate a line is the continuation of a
                               "  wrapped line
set showmatch                  " show matching parenthesis
set foldlevelstart=99          " Start with all folds open
set dictionary=/usr/share/dict/words        " for spell checking
set spellfile=~/.dotfiles/vim/en.utf-8.add  " to add words
set spelllang=en_us            " yes, i do speak it
set spellsuggest=best,10       " only display the 10 best suggestions
set number                     " line numbers
set nostartofline              " don't move the cursor to the start of the
                               " line when we move vertically in the buffer
set pumheight=10               " show no more than 10 entries in completion menus
set scrolloff=5                " keep at least 5 lines of context when scrolling
set sidescrolloff=10           " keep at least 10 characters of context when scrolling
set sidescroll=1               " scroll horizontally by 1
set incsearch                  " search as I type
set ignorecase                 " ignore case when searching, ...
set smartcase                  " unless I search for uppercase
set hlsearch                   " and highlight searches
set backupdir=$HOME/.vimdata/vimbackup/ " save backups in alternate location
set directory=$HOME/.vimdata/vimswap/   " save swap files here
set viewdir=$HOME/.vimdata/vimviews/    " save views here
set wildmenu                   " commandline completion is nice
set expandtab                  " by default, use spaces & no tabs
set shiftwidth=4               " shift width (>> & autoindent)
set softtabstop=4              " 1 tab = 4 spaces
set tabstop=4                  " 1 tab = 4 spaces
set shiftround                 " round indent to multiple of shiftwidth
set smarttab                   " shiftwidth at start of line, tabstop elsewhere
set textwidth=80               " wrap at 80 columns
set tags=./tags;               " name of the tags files which is relative to the project
set showtabline=2              " always show the tab line
set notimeout
set ttimeout
set ttimeoutlen=10
set nomodeline
set display=lastline
if exists('+colorcolumn')
  set colorcolumn=+1
endif

" undofile ------------------------------------------------------------------{{{
if exists('&undofile')
    set undofile         " Save undo history to a file for persistence
    set undodir=$HOME/.vimdata/vimundo/ " Save undo data here
endif
" }}}
" fillchars -----------------------------------------------------------------{{{
set fillchars=         " reset fillchars
set fillchars+=fold:-  " fill foldtext with dashes
set fillchars+=diff:⣿  " indicate deleted lines in diffs with ⣿
set fillchars+=vert:│  " indicate vertical splits with │
set fillchars+=stlnc:━ " indicate horizontal splits with -
" }}}
" listchars -----------------------------------------------------------------{{{
set listchars=            " reset listchars
set listchars+=tab:▸\     " display tabs
set listchars+=extends:❯  " hint that theres more to the right, ...
set listchars+=precedes:❮ " hint that theres more to the left, ...
" }}}
" shortmess -----------------------------------------------------------------{{{
set shortmess=   " reset shortmess
set shortmess+=f " '(3 of 5)' instead of '(file 3 of 5)'
set shortmess+=i " '[noeol] instead of '[Incompelte last line]'
set shortmess+=l " '999L, 888C' instead of '999 lines, 888 characters'
set shortmess+=m " '[+]' instead of '[Modified]'
set shortmess+=n " '[New]' instead of '[New File]'
set shortmess+=r " '[RO]' instead of '[readonly]'
set shortmess+=w " '[w]' instead of 'written' '[a]' instead of 'appended'
set shortmess+=x " '[dos]' instead of '[dos format]', '[unix]' instead of
                 "  '[unix format]', '[mac]' instead of '[mac format]'
set shortmess+=o " overwrite message for writing a file with subsequent message
                 "  for reading a file (useful for ":wn" or when 'autowrite' on)
set shortmess+=O " message for reading a file overwrites any previous message.
                 "  Also for quickfix message (e.g., ":cn").
set shortmess+=t " truncate file message at the start if it is too long to fit
                 "  on the command-line, "<" will appear in the left most column.
                 "  Ignored in Ex mode.
set shortmess+=T " truncate other messages in the middle if they are too long to
                 "  fit on the command line.  "..." will appear  in the middle.
                 "  Ignored in Ex mode.
set shortmess+=I " don't give the intro message when starting Vim |:intro|.
" }}}
" completeopt ---------------------------------------------------------------{{{
set completeopt=         " reset completeopt
set completeopt+=longest " insert the longest match
set completeopt+=menuone " show the menu when there are matches
"}}}
" viminfo -------------------------------------------------------------------{{{
set viminfo+=n~/.vimdata/viminfo " move the viminfo file into ~/.vimdata
" }}}
" virtualedit ---------------------------------------------------------------{{{
set virtualedit=        " reset virtualedit
set virtualedit+=block  " can move past the end of the line in visual block mode
set virtualedit+=insert " can move past the end of the line in insert mode
" }}}
" formatoptions -------------------------------------------------------------{{{
set formatoptions=   " reset formatoptions
set formatoptions+=c " autowrap comments using textwidth
set formatoptions+=q " format comments with gq
set formatoptions+=n " recognize numbered lists
" }}}
" wildmode ------------------------------------------------------------------{{{
set wildmode=list:full " closest to ido-mode
" }}}
" wildignore ----------------------------------------------------------------{{{
set wildignore+=.git,.hg,.svn,CVS              " ignore vcs directories
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg " ignore images
set wildignore+=*.o,*.so,*.out                 " ignore compiled objects
set wildignore+=*.sw?                          " ignore swap files
set wildignore+=*.DS_Store                     " ignore mac crap
set wildignore+=*.pyc,*.pyo                    " ignore pyton compiled objects
" }}}
" statusline ----------------------------------------------------------------{{{
set statusline=         " clear statusline
set statusline+=%F\     " full filename
set statusline+=%m%r%w  " flags
set statusline+=%y\     " filetype
set statusline+=%=      " seperator
set statusline+=c:%c\   " column
set statusline+=l:%l/%L " line
" }}}
" }}}
" Leaders -------------------------------------------------------------------{{{
let mapleader = " "     " this may change soon, I keep wanting to have the
                        " default behavior work for ,.
let localleader = '\\'
" }}}
" Custom functions ----------------------------------------------------------{{{
function! Preserve(command) " -----------------------------------------------{{{
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction " }}}
function! RemoveTrailingWhiteSpace() " --------------------------------------{{{
    " Allow a buffer local variable twsok (trailing whitespace ok) to permit
    " trailing whitspace -- sometimes I need to do this if im editing someone elses
    " code and don't want to own the entire file in vcs. Enable it with
    " let twsok=1, disable it with unlet twsok
    if !exists("b:twsok")
        call Preserve("%s/\\s\\+$//e")
    endif
endfun " }}}
function! RestoreCursorPosition() " -----------------------------------------{{{
    " Restore cursor position to the last time you were in the file, this uses marks
    " so it's dependent on viminfo
    normal! g`"
    call FocusFold()
endfunction " }}}
function! Pulse(n) " --------------------------------------------------------{{{
    let current_window = winnr()
    windo set nocursorline
    execute current_window . 'wincmd w'
    setlocal cursorline

    redir => old_hi
        silent execute 'hi CursorLine'
    redir END
    let old_hi = split(old_hi, '\n')[0]
    let old_hi = substitute(old_hi, 'xxx', '', '')

    let steps = a:n
    let width = 1
    let start = width
    let end = steps * width
    let color = 233

    for i in range(start, end, width)
        execute "hi CursorLine ctermbg=" . (color + i)
        redraw
        sleep 6m
    endfor
    for i in range(end, start, -1 * width)
        execute "hi CursorLine ctermbg=" . (color + i)
        redraw
        sleep 6m
    endfor

    execute 'hi ' . old_hi
    setlocal nocursorline
endfunction " }}}
function! FocusFold() " -----------------------------------------------------{{{
    let c = virtcol(".")
    let l = line(".")
    normal! zM
    normal! zv
    normal! zz
    call cursor(l, c)
    call Pulse(9)
    return 1
endfunction " }}}
" }}}
" Custom maps ---------------------------------------------------------------{{{
" %% in command mode inserts current files directory, so :e %%x.txt will edit
" x.txt in the same directory as the current file. {{{
cnoremap %% <C-R>=expand('%:h').'/'<cr>
" }}}
" ZZ = wq, XX = cquit
nnoremap XX :cquit<cr>
" A few useful sane maps (from tpope/sensible.vim{{{
inoremap <C-U> <C-G>u<C-U>
nnoremap & :&&<CR>
xnoremap & :&&<CR>
nnoremap Y y$
" }}}
" Reindent {{{
nnoremap <leader>G :call Preserve("normal gg=G")<cr>
" }}}
" Open the quickfix window{{{
nnoremap <leader>qf :cwin<cr>
augroup quickfix
  autocmd!
  autocmd QuickFixCmdPost [^l]* nested cwindow
  autocmd QuickFixCmdPost    l* nested lwindow
augroup END

" }}}
" Focus when searching ------------------------------------------------------{{{
nnoremap <silent> n n:call Pulse(5)<cr>
nnoremap <silent> N N:call Pulse(5)<cr>
" }}}
" j and k will go one line, even if they're wrapped -------------------------{{{
nnoremap <silent> j gj
nnoremap <silent> k gk
" }}}
" When using marks, all by default mark columns as well ---------------------{{{
nnoremap <silent> ' `
" }}}
" Simple map to disable highlighting ----------------------------------------{{{
nnoremap <silent> // :nohl<cr>
" }}}
" Easier navigation between open windows ------------------------------------{{{
nnoremap <silent> <C-k> <C-W>k
nnoremap <silent> <C-j> <C-W>j
nnoremap <silent> <C-h> <C-W>h
nnoremap <silent> <C-l> <C-W>l

" }}}
" Simple splits, inspired by my tmux configuration --------------------------{{{
nnoremap <silent> _ :sp<cr>
nnoremap <silent> \| :vsp<cr>
" }}}
" Reselect visually selected text after indenting ---------------------------{{{
vnoremap <silent> > >gv
vnoremap <silent> < <gv
" }}}
" make Y consistant with C and D. Yank to end of line -----------------------{{{
noremap <silent> Y y$
" }}}
" Easily modify ~/.{g,}vimrc ------------------------------------------------{{{
nnoremap <silent> <leader>ev :e $MYVIMRC<CR>
nnoremap <silent> <leader>egv :e $MYGVIMRC<CR>
" }}}
" sudo write-file in case you're in a file you dont have privileges to write{{{
cmap <silent> w!! w !sudo tee % >/dev/null<cr>
" }}}
" Easy window resizing ------------------------------------------------------{{{
noremap <silent> <up> <C-W>+
noremap <silent> <down> <C-W>-
nnoremap <silent> <left> <C-W><
nnoremap <silent> <right> <C-W>>
" }}}
" . returns to starting place after repeat ----------------------------------{{{
nnoremap <silent> . .`[
" }}}
" Custom text objects around and in character pairs -------------------------{{{
let pairs = { ':' : ':',
            \ '.' : '.',
            \ ',' : ',',
            \ '/' : '/',
            \ '<bar>' : '<bar>' }
for [start, end] in items(pairs)
    exe "nnoremap <silent> ci".start." T".start."ct".end
    exe "nnoremap <silent> ca".start." F".start."cf".end
    exe "nnoremap <silent> yi".start." T".start."yt".end
    exe "nnoremap <silent> ya".start." F".start."yf".end
    exe "nnoremap <silent> vi".start." T".start."vt".end
    exe "nnoremap <silent> va".start." F".start."vf".end
    exe "nnoremap <silent> di".start." T".start."dt".end
    exe "nnoremap <silent> da".start." F".start."df".end
endfor
" }}}
" Focus Fold ----------------------------------------------------------------{{{
nnoremap <silent> zf :call FocusFold()<cr>
" }}}
" Simple sorting ------------------------------------------------------------{{{
vnoremap <silent> <leader>s :sort<cr>gv
nnoremap <silent> <leader>s mzvip:sort<cr>`z:delm z<cr>

" }}}
" }}}
" Custom commands -----------------------------------------------------------{{{
" Allow common typos in commands --------------------------------------------{{{
command! -bang E e<bang>
command! -bang Q q<bang>
command! -bang W w<bang>
command! -bang QA qa<bang>
command! -bang Qa qa<bang>
command! -bang Wa wa<bang>
command! -bang WA wa<bang>
command! -bang Wq wq<bang>
command! -bang WQ wq<bang>
" }}}
command! RemoveTrailingWhiteSpace :call RemoveTrailingWhiteSpace()
command! -nargs=0 Pulse call Pulse(9)
" }}}
" Colorscheme ---------------------------------------------------------------{{{
colorscheme distinguished
" }}}
" Plugin Configurations -----------------------------------------------------{{{
" ack2ag {{{
let g:ackprg = 'ag --nogroup --nocolor --column'
" }}}
" vim-signature{{{
let g:SignatureMarkTextHL='SignatureMarkTextHL'
let g:SignatureMarkerTextHL='SignatureMarkerTextHL'
" }}}
" Supertab ------------------------------------------------------------------{{{
let g:SuperTabDefaultCompletionType = "context"
" }}}
" NetRW ---------------------------------------------------------------------{{{
let g:netrw_list_hide = '^\.,\~$,^tags$'
" }}}
" Ctrl+P --------------------------------------------------------------------{{{
let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_cache_dir = $HOME.'/.vimdata/ctrlp'
let g:ctrlp_map = '<leader>p'
let g:ctrlp_mruf_relative = 1
let g:ctrlp_max_height=1000
let g:ctrlp_reuse_window = 'netrw\|help'
let g:ctrlp_extensions = ['tag', 'buffertag', 'quickfix', 'dir', 'rtscript',
                       \  'undo', 'line', 'changes', 'mixed', 'bookmarkdir']

nnoremap <silent> <Leader>b <esc>:CtrlPBuffer<cr>
"  <C-t> → will open the finding match in a tab
"  <C-v> → will open the finding match in a vertical split
"  <C-h> → will open the finding match in a horizontal split
" }}}
" Tabularize ----------------------------------------------------------------{{{
vnoremap <silent> <Leader>a=> :Tabularize /=><CR>
vnoremap <silent> <Leader>a= :Tabularize /=<CR>
vnoremap <silent> <Leader>a, :Tabularize /,\zs<CR>
nnoremap <silent> <Leader>a, :Tabularize /,\zs<CR>
vnoremap <silent> <Leader>a: :Tabularize /:\zs<CR>
nnoremap <silent> <Leader>a: :Tabularize /:\zs<CR>
" }}}
" slime ---------------------------------------------------------------------{{{
" :SlimeConfig - configure which tmux pane to send text
" :SlimeSend - send text, can use a range, or marks including the marks used to
" delimit visual mode selection
" python => ipython
" perl   => Devel::REPL's re.pl
" ruby   => irb
let g:slime_no_mappings = 0
let g:slime_paste_file = $HOME.'/.vimdata/slime'
let g:slime_target = "tmux"
au FileType python let g:slime_python_ipython = 1
" }}}
" tagbar --------------------------------------------------------------------{{{
nnoremap <silent> <leader>t :TagbarToggle<cr>
" }}}
" NERDCommenter -------------------------------------------------------------{{{
let g:NERDCreateDefaultMappings = 0
let g:NERDSpaceDelims = 1
vmap <silent> <leader>cc <plug>NERDCommenterToggle<cr>vgv
nmap <silent> <leader>cc <plug>NERDCommenterToggle
nmap <silent> <leader>c$ <plug>NERDCommenterToEOL
" }}}
" Filetype detection --------------------------------------------------------{{{
au BufNewFile,BufRead gitconfig setf gitconfig
au BufNewFile,BufRead /private/tmp/crontab.* setl backupcopy=yes
" }}}
" Filetype configurations ---------------------------------------------------{{{
" make ----------------------------------------------------------------------{{{
au FileType make au BufWritePre <buffer> RemoveTrailingWhiteSpace
au FileType make setl noexpandtab
au FileType make setl nosmarttab
au FileType make setl softtabstop=0
au FileType make setl tabstop=4
" }}}
" man -----------------------------------------------------------------------{{{
au FileType man setl nolist
au FileType man setl nonumber
au FileType man setl tabstop=8
au FileType man setl nomodified
au FileType man setl nomodifiable
au FileType man setl foldmethod=indent
au FileType man setl foldlevel=99
au FileType man nnoremap <buffer> q :q<cr>
au FileType man nnoremap <buffer> <space><space> <C-D>
" }}}
" markdown ------------------------------------------------------------------{{{
au FileType markdown au BufWritePre <buffer> RemoveTrailingWhiteSpace
au FileType markdown setl shiftwidth=4
au FileType markdown setl softtabstop=4
au BufNewFile,BufRead $HOME/.tasks.md setl nospell
" }}}
" perl ----------------------------------------------------------------------{{{
au FileType perl au BufWritePre <buffer> RemoveTrailingWhiteSpace
au FileType perl setl iskeyword+=$,%,@
" }}}
" puppet --------------------------------------------------------------------{{{
au FileType puppet au BufWritePre <buffer> RemoveTrailingWhiteSpace
" }}}
" python --------------------------------------------------------------------{{{
au FileType python au BufWritePre <buffer> RemoveTrailingWhiteSpace
au FileType python setl textwidth=79
au FileType pyrex au BufWritePre <buffer> RemoveTrailingWhiteSpace
au FileType pyrex setl textwidth=79
" }}}
" ruby ----------------------------------------------------------------------{{{
au FileType ruby au BufWritePre <buffer> RemoveTrailingWhiteSpace
" }}}
" shell ---------------------------------------------------------------------{{{
au FileType sh,zsh au BufWritePre <buffer> RemoveTrailingWhiteSpace
" }}}
" vim -----------------------------------------------------------------------{{{
au FileType vim au BufWritePre <buffer> RemoveTrailingWhiteSpace
au FileType vim setl foldmethod=marker
au FileType help setl nolist
au FileType help setl nonumber
au FileType help setl nomodified
au FileType help setl nomodifiable
" }}}
" }}}
" Miscellaneous -------------------------------------------------------------{{{
" Prepare our vim cache directories -----------------------------------------{{{
silent execute '!mkdir -p $HOME/.vimdata/vimbackup'
silent execute '!mkdir -p $HOME/.vimdata/vimswap'
silent execute '!mkdir -p $HOME/.vimdata/vimviews'
silent execute '!mkdir -p $HOME/.vimdata/vimundo'
silent execute '!mkdir -p $HOME/.vimdata/ctrlp'
silent execute '!mkdir -p $HOME/.vimdata/tags'
" }}}
" Use a bar-shaped cursor for insert mode, even through tmux. ---------------{{{
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
endif
" }}}
" Toggle listchars as we enter and exit insert mode -------------------------{{{
augroup trailing
    au!
    au InsertEnter * :set listchars-=trail:⌴
    au InsertLeave * :set listchars+=trail:⌴
augroup END
" }}}
" Highlight VCS conflict markers --------------------------------------------{{{
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'
" }}}
" Restore cursor position ---------------------------------------------------{{{
augroup restoreCursorPosition
  autocmd!
  autocmd BufReadPost * call RestoreCursorPosition()
augroup END
" }}}
" Window navigation ---------------------------------------------------------{{{
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
" }}}
" Load abbreviations --------------------------------------------------------{{{
source ~/.vim/abbrev
" }}}
" }}}
